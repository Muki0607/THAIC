local basedir = '' --set imgui directory location 
--[[ BEGIN AUTOGENERATED SEGMENT ]]
local cdecl = cdecl or ''
cdecl = cdecl..[[
typedef unsigned long long ImU64;
typedef struct CustomRect CustomRect;
typedef struct GlyphRangesBuilder GlyphRangesBuilder;
typedef struct ImFontGlyph ImFontGlyph;
typedef struct Pair Pair;
typedef struct TextRange TextRange;
typedef struct ImVec4 ImVec4;
typedef struct ImVec2 ImVec2;
typedef struct ImGuiContext ImGuiContext;
typedef struct ImGuiPayload ImGuiPayload;
typedef struct ImGuiListClipper ImGuiListClipper;
typedef struct ImGuiSizeCallbackData ImGuiSizeCallbackData;
typedef struct ImGuiTextEditCallbackData ImGuiTextEditCallbackData;
typedef struct ImGuiTextBuffer ImGuiTextBuffer;
typedef struct ImGuiTextFilter ImGuiTextFilter;
typedef struct ImGuiStyle ImGuiStyle;
typedef struct ImGuiStorage ImGuiStorage;
typedef struct ImGuiOnceUponAFrame ImGuiOnceUponAFrame;
typedef struct ImGuiIO ImGuiIO;
typedef struct ImColor ImColor;
typedef struct ImFontConfig ImFontConfig;
typedef struct ImFontAtlas ImFontAtlas;
typedef struct ImFont ImFont;
typedef struct ImDrawVert ImDrawVert;
typedef struct ImDrawListSharedData ImDrawListSharedData;
typedef struct ImDrawList ImDrawList;
typedef struct ImDrawData ImDrawData;
typedef struct ImDrawCmd ImDrawCmd;
typedef struct ImDrawChannel ImDrawChannel;
struct ImDrawChannel;
struct ImDrawCmd;
struct ImDrawData;
struct ImDrawList;
struct ImDrawListSharedData;
struct ImDrawVert;
struct ImFont;
struct ImFontAtlas;
struct ImFontConfig;
struct ImColor;
struct ImGuiIO;
struct ImGuiOnceUponAFrame;
struct ImGuiStorage;
struct ImGuiStyle;
struct ImGuiTextFilter;
struct ImGuiTextBuffer;
struct ImGuiTextEditCallbackData;
struct ImGuiSizeCallbackData;
struct ImGuiListClipper;
struct ImGuiPayload;
struct ImGuiContext;
typedef void* ImTextureID;
typedef unsigned int ImGuiID;
typedef unsigned short ImWchar;
typedef int ImGuiCol;
typedef int ImGuiDataType;
typedef int ImGuiDir;
typedef int ImGuiCond;
typedef int ImGuiKey;
typedef int ImGuiNavInput;
typedef int ImGuiMouseCursor;
typedef int ImGuiStyleVar;
typedef int ImDrawCornerFlags;
typedef int ImDrawListFlags;
typedef int ImFontAtlasFlags;
typedef int ImGuiBackendFlags;
typedef int ImGuiColorEditFlags;
typedef int ImGuiColumnsFlags;
typedef int ImGuiConfigFlags;
typedef int ImGuiComboFlags;
typedef int ImGuiDragDropFlags;
typedef int ImGuiFocusedFlags;
typedef int ImGuiHoveredFlags;
typedef int ImGuiInputTextFlags;
typedef int ImGuiSelectableFlags;
typedef int ImGuiTreeNodeFlags;
typedef int ImGuiWindowFlags;
typedef int (*ImGuiTextEditCallback)(ImGuiTextEditCallbackData *data);
typedef void (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);
typedef signed int ImS32;
typedef unsigned int ImU32;
typedef signed long long ImS64;
typedef unsigned long long ImU64;
struct ImVec2
{
    float x, y;
};
struct ImVec4
{
    float x, y, z, w;
};
enum ImGuiWindowFlags_
{
    ImGuiWindowFlags_None = 0,
    ImGuiWindowFlags_NoTitleBar = 1 << 0,
    ImGuiWindowFlags_NoResize = 1 << 1,
    ImGuiWindowFlags_NoMove = 1 << 2,
    ImGuiWindowFlags_NoScrollbar = 1 << 3,
    ImGuiWindowFlags_NoScrollWithMouse = 1 << 4,
    ImGuiWindowFlags_NoCollapse = 1 << 5,
    ImGuiWindowFlags_AlwaysAutoResize = 1 << 6,
    ImGuiWindowFlags_NoSavedSettings = 1 << 8,
    ImGuiWindowFlags_NoInputs = 1 << 9,
    ImGuiWindowFlags_MenuBar = 1 << 10,
    ImGuiWindowFlags_HorizontalScrollbar = 1 << 11,
    ImGuiWindowFlags_NoFocusOnAppearing = 1 << 12,
    ImGuiWindowFlags_NoBringToFrontOnFocus = 1 << 13,
    ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,
    ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,
    ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,
    ImGuiWindowFlags_ResizeFromAnySide = 1 << 17,
    ImGuiWindowFlags_NoNavInputs = 1 << 18,
    ImGuiWindowFlags_NoNavFocus = 1 << 19,
    ImGuiWindowFlags_NoNav = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
    ImGuiWindowFlags_NavFlattened = 1 << 23,
    ImGuiWindowFlags_ChildWindow = 1 << 24,
    ImGuiWindowFlags_Tooltip = 1 << 25,
    ImGuiWindowFlags_Popup = 1 << 26,
    ImGuiWindowFlags_Modal = 1 << 27,
    ImGuiWindowFlags_ChildMenu = 1 << 28
};
enum ImGuiInputTextFlags_
{
    ImGuiInputTextFlags_None = 0,
    ImGuiInputTextFlags_CharsDecimal = 1 << 0,
    ImGuiInputTextFlags_CharsHexadecimal = 1 << 1,
    ImGuiInputTextFlags_CharsUppercase = 1 << 2,
    ImGuiInputTextFlags_CharsNoBlank = 1 << 3,
    ImGuiInputTextFlags_AutoSelectAll = 1 << 4,
    ImGuiInputTextFlags_EnterReturnsTrue = 1 << 5,
    ImGuiInputTextFlags_CallbackCompletion = 1 << 6,
    ImGuiInputTextFlags_CallbackHistory = 1 << 7,
    ImGuiInputTextFlags_CallbackAlways = 1 << 8,
    ImGuiInputTextFlags_CallbackCharFilter = 1 << 9,
    ImGuiInputTextFlags_AllowTabInput = 1 << 10,
    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,
    ImGuiInputTextFlags_NoHorizontalScroll = 1 << 12,
    ImGuiInputTextFlags_AlwaysInsertMode = 1 << 13,
    ImGuiInputTextFlags_ReadOnly = 1 << 14,
    ImGuiInputTextFlags_Password = 1 << 15,
    ImGuiInputTextFlags_NoUndoRedo = 1 << 16,
    ImGuiInputTextFlags_CharsScientific = 1 << 17,
    ImGuiInputTextFlags_Multiline = 1 << 20
};
enum ImGuiTreeNodeFlags_
{
    ImGuiTreeNodeFlags_None = 0,
    ImGuiTreeNodeFlags_Selected = 1 << 0,
    ImGuiTreeNodeFlags_Framed = 1 << 1,
    ImGuiTreeNodeFlags_AllowItemOverlap = 1 << 2,
    ImGuiTreeNodeFlags_NoTreePushOnOpen = 1 << 3,
    ImGuiTreeNodeFlags_NoAutoOpenOnLog = 1 << 4,
    ImGuiTreeNodeFlags_DefaultOpen = 1 << 5,
    ImGuiTreeNodeFlags_OpenOnDoubleClick = 1 << 6,
    ImGuiTreeNodeFlags_OpenOnArrow = 1 << 7,
    ImGuiTreeNodeFlags_Leaf = 1 << 8,
    ImGuiTreeNodeFlags_Bullet = 1 << 9,
    ImGuiTreeNodeFlags_FramePadding = 1 << 10,
    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,
    ImGuiTreeNodeFlags_CollapsingHeader = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog
};
enum ImGuiSelectableFlags_
{
    ImGuiSelectableFlags_None = 0,
    ImGuiSelectableFlags_DontClosePopups = 1 << 0,
    ImGuiSelectableFlags_SpanAllColumns = 1 << 1,
    ImGuiSelectableFlags_AllowDoubleClick = 1 << 2
};
enum ImGuiComboFlags_
{
    ImGuiComboFlags_None = 0,
    ImGuiComboFlags_PopupAlignLeft = 1 << 0,
    ImGuiComboFlags_HeightSmall = 1 << 1,
    ImGuiComboFlags_HeightRegular = 1 << 2,
    ImGuiComboFlags_HeightLarge = 1 << 3,
    ImGuiComboFlags_HeightLargest = 1 << 4,
    ImGuiComboFlags_NoArrowButton = 1 << 5,
    ImGuiComboFlags_NoPreview = 1 << 6,
    ImGuiComboFlags_HeightMask_ = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest
};
enum ImGuiFocusedFlags_
{
    ImGuiFocusedFlags_None = 0,
    ImGuiFocusedFlags_ChildWindows = 1 << 0,
    ImGuiFocusedFlags_RootWindow = 1 << 1,
    ImGuiFocusedFlags_AnyWindow = 1 << 2,
    ImGuiFocusedFlags_RootAndChildWindows = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows
};
enum ImGuiHoveredFlags_
{
    ImGuiHoveredFlags_None = 0,
    ImGuiHoveredFlags_ChildWindows = 1 << 0,
    ImGuiHoveredFlags_RootWindow = 1 << 1,
    ImGuiHoveredFlags_AnyWindow = 1 << 2,
    ImGuiHoveredFlags_AllowWhenBlockedByPopup = 1 << 3,
    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem = 1 << 5,
    ImGuiHoveredFlags_AllowWhenOverlapped = 1 << 6,
    ImGuiHoveredFlags_RectOnly = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped,
    ImGuiHoveredFlags_RootAndChildWindows = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows
};
enum ImGuiDragDropFlags_
{
    ImGuiDragDropFlags_None = 0,
    ImGuiDragDropFlags_SourceNoPreviewTooltip = 1 << 0,
    ImGuiDragDropFlags_SourceNoDisableHover = 1 << 1,
    ImGuiDragDropFlags_SourceNoHoldToOpenOthers = 1 << 2,
    ImGuiDragDropFlags_SourceAllowNullID = 1 << 3,
    ImGuiDragDropFlags_SourceExtern = 1 << 4,
    ImGuiDragDropFlags_AcceptBeforeDelivery = 1 << 10,
    ImGuiDragDropFlags_AcceptNoDrawDefaultRect = 1 << 11,
    ImGuiDragDropFlags_AcceptNoPreviewTooltip = 1 << 12,
    ImGuiDragDropFlags_AcceptPeekOnly = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect
};
enum ImGuiDataType_
{
    ImGuiDataType_S32,
    ImGuiDataType_U32,
    ImGuiDataType_S64,
    ImGuiDataType_U64,
    ImGuiDataType_Float,
    ImGuiDataType_Double,
    ImGuiDataType_COUNT
};
enum ImGuiDir_
{
    ImGuiDir_None = -1,
    ImGuiDir_Left = 0,
    ImGuiDir_Right = 1,
    ImGuiDir_Up = 2,
    ImGuiDir_Down = 3,
    ImGuiDir_COUNT
};
enum ImGuiKey_
{
    ImGuiKey_Tab,
    ImGuiKey_LeftArrow,
    ImGuiKey_RightArrow,
    ImGuiKey_UpArrow,
    ImGuiKey_DownArrow,
    ImGuiKey_PageUp,
    ImGuiKey_PageDown,
    ImGuiKey_Home,
    ImGuiKey_End,
    ImGuiKey_Insert,
    ImGuiKey_Delete,
    ImGuiKey_Backspace,
    ImGuiKey_Space,
    ImGuiKey_Enter,
    ImGuiKey_Escape,
    ImGuiKey_A,
    ImGuiKey_C,
    ImGuiKey_V,
    ImGuiKey_X,
    ImGuiKey_Y,
    ImGuiKey_Z,
    ImGuiKey_COUNT
};
enum ImGuiNavInput_
{
    ImGuiNavInput_Activate,
    ImGuiNavInput_Cancel,
    ImGuiNavInput_Input,
    ImGuiNavInput_Menu,
    ImGuiNavInput_DpadLeft,
    ImGuiNavInput_DpadRight,
    ImGuiNavInput_DpadUp,
    ImGuiNavInput_DpadDown,
    ImGuiNavInput_LStickLeft,
    ImGuiNavInput_LStickRight,
    ImGuiNavInput_LStickUp,
    ImGuiNavInput_LStickDown,
    ImGuiNavInput_FocusPrev,
    ImGuiNavInput_FocusNext,
    ImGuiNavInput_TweakSlow,
    ImGuiNavInput_TweakFast,
    ImGuiNavInput_KeyMenu_,
    ImGuiNavInput_KeyLeft_,
    ImGuiNavInput_KeyRight_,
    ImGuiNavInput_KeyUp_,
    ImGuiNavInput_KeyDown_,
    ImGuiNavInput_COUNT,
    ImGuiNavInput_InternalStart_ = ImGuiNavInput_KeyMenu_
};
enum ImGuiConfigFlags_
{
    ImGuiConfigFlags_NavEnableKeyboard = 1 << 0,
    ImGuiConfigFlags_NavEnableGamepad = 1 << 1,
    ImGuiConfigFlags_NavEnableSetMousePos = 1 << 2,
    ImGuiConfigFlags_NavNoCaptureKeyboard = 1 << 3,
    ImGuiConfigFlags_NoMouse = 1 << 4,
    ImGuiConfigFlags_NoMouseCursorChange = 1 << 5,
    ImGuiConfigFlags_IsSRGB = 1 << 20,
    ImGuiConfigFlags_IsTouchScreen = 1 << 21
};
enum ImGuiBackendFlags_
{
    ImGuiBackendFlags_HasGamepad = 1 << 0,
    ImGuiBackendFlags_HasMouseCursors = 1 << 1,
    ImGuiBackendFlags_HasSetMousePos = 1 << 2
};
enum ImGuiCol_
{
    ImGuiCol_Text,
    ImGuiCol_TextDisabled,
    ImGuiCol_WindowBg,
    ImGuiCol_ChildBg,
    ImGuiCol_PopupBg,
    ImGuiCol_Border,
    ImGuiCol_BorderShadow,
    ImGuiCol_FrameBg,
    ImGuiCol_FrameBgHovered,
    ImGuiCol_FrameBgActive,
    ImGuiCol_TitleBg,
    ImGuiCol_TitleBgActive,
    ImGuiCol_TitleBgCollapsed,
    ImGuiCol_MenuBarBg,
    ImGuiCol_ScrollbarBg,
    ImGuiCol_ScrollbarGrab,
    ImGuiCol_ScrollbarGrabHovered,
    ImGuiCol_ScrollbarGrabActive,
    ImGuiCol_CheckMark,
    ImGuiCol_SliderGrab,
    ImGuiCol_SliderGrabActive,
    ImGuiCol_Button,
    ImGuiCol_ButtonHovered,
    ImGuiCol_ButtonActive,
    ImGuiCol_Header,
    ImGuiCol_HeaderHovered,
    ImGuiCol_HeaderActive,
    ImGuiCol_Separator,
    ImGuiCol_SeparatorHovered,
    ImGuiCol_SeparatorActive,
    ImGuiCol_ResizeGrip,
    ImGuiCol_ResizeGripHovered,
    ImGuiCol_ResizeGripActive,
    ImGuiCol_PlotLines,
    ImGuiCol_PlotLinesHovered,
    ImGuiCol_PlotHistogram,
    ImGuiCol_PlotHistogramHovered,
    ImGuiCol_TextSelectedBg,
    ImGuiCol_ModalWindowDarkening,
    ImGuiCol_DragDropTarget,
    ImGuiCol_NavHighlight,
    ImGuiCol_NavWindowingHighlight,
    ImGuiCol_COUNT
};
enum ImGuiStyleVar_
{
    ImGuiStyleVar_Alpha,
    ImGuiStyleVar_WindowPadding,
    ImGuiStyleVar_WindowRounding,
    ImGuiStyleVar_WindowBorderSize,
    ImGuiStyleVar_WindowMinSize,
    ImGuiStyleVar_WindowTitleAlign,
    ImGuiStyleVar_ChildRounding,
    ImGuiStyleVar_ChildBorderSize,
    ImGuiStyleVar_PopupRounding,
    ImGuiStyleVar_PopupBorderSize,
    ImGuiStyleVar_FramePadding,
    ImGuiStyleVar_FrameRounding,
    ImGuiStyleVar_FrameBorderSize,
    ImGuiStyleVar_ItemSpacing,
    ImGuiStyleVar_ItemInnerSpacing,
    ImGuiStyleVar_IndentSpacing,
    ImGuiStyleVar_ScrollbarSize,
    ImGuiStyleVar_ScrollbarRounding,
    ImGuiStyleVar_GrabMinSize,
    ImGuiStyleVar_GrabRounding,
    ImGuiStyleVar_ButtonTextAlign,
    ImGuiStyleVar_COUNT
};
enum ImGuiColorEditFlags_
{
    ImGuiColorEditFlags_None = 0,
    ImGuiColorEditFlags_NoAlpha = 1 << 1,
    ImGuiColorEditFlags_NoPicker = 1 << 2,
    ImGuiColorEditFlags_NoOptions = 1 << 3,
    ImGuiColorEditFlags_NoSmallPreview = 1 << 4,
    ImGuiColorEditFlags_NoInputs = 1 << 5,
    ImGuiColorEditFlags_NoTooltip = 1 << 6,
    ImGuiColorEditFlags_NoLabel = 1 << 7,
    ImGuiColorEditFlags_NoSidePreview = 1 << 8,
    ImGuiColorEditFlags_NoDragDrop = 1 << 9,
    ImGuiColorEditFlags_AlphaBar = 1 << 16,
    ImGuiColorEditFlags_AlphaPreview = 1 << 17,
    ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 18,
    ImGuiColorEditFlags_HDR = 1 << 19,
    ImGuiColorEditFlags_RGB = 1 << 20,
    ImGuiColorEditFlags_HSV = 1 << 21,
    ImGuiColorEditFlags_HEX = 1 << 22,
    ImGuiColorEditFlags_Uint8 = 1 << 23,
    ImGuiColorEditFlags_Float = 1 << 24,
    ImGuiColorEditFlags_PickerHueBar = 1 << 25,
    ImGuiColorEditFlags_PickerHueWheel = 1 << 26,
    ImGuiColorEditFlags__InputsMask = ImGuiColorEditFlags_RGB|ImGuiColorEditFlags_HSV|ImGuiColorEditFlags_HEX,
    ImGuiColorEditFlags__DataTypeMask = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_Float,
    ImGuiColorEditFlags__PickerMask = ImGuiColorEditFlags_PickerHueWheel|ImGuiColorEditFlags_PickerHueBar,
    ImGuiColorEditFlags__OptionsDefault = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_RGB|ImGuiColorEditFlags_PickerHueBar
};
enum ImGuiMouseCursor_
{
    ImGuiMouseCursor_None = -1,
    ImGuiMouseCursor_Arrow = 0,
    ImGuiMouseCursor_TextInput,
    ImGuiMouseCursor_ResizeAll,
    ImGuiMouseCursor_ResizeNS,
    ImGuiMouseCursor_ResizeEW,
    ImGuiMouseCursor_ResizeNESW,
    ImGuiMouseCursor_ResizeNWSE,
    ImGuiMouseCursor_COUNT
};
enum ImGuiCond_
{
    ImGuiCond_Always = 1 << 0,
    ImGuiCond_Once = 1 << 1,
    ImGuiCond_FirstUseEver = 1 << 2,
    ImGuiCond_Appearing = 1 << 3
};
struct ImGuiStyle
{
    float Alpha;
    ImVec2 WindowPadding;
    float WindowRounding;
    float WindowBorderSize;
    ImVec2 WindowMinSize;
    ImVec2 WindowTitleAlign;
    float ChildRounding;
    float ChildBorderSize;
    float PopupRounding;
    float PopupBorderSize;
    ImVec2 FramePadding;
    float FrameRounding;
    float FrameBorderSize;
    ImVec2 ItemSpacing;
    ImVec2 ItemInnerSpacing;
    ImVec2 TouchExtraPadding;
    float IndentSpacing;
    float ColumnsMinSpacing;
    float ScrollbarSize;
    float ScrollbarRounding;
    float GrabMinSize;
    float GrabRounding;
    ImVec2 ButtonTextAlign;
    ImVec2 DisplayWindowPadding;
    ImVec2 DisplaySafeAreaPadding;
    float MouseCursorScale;
    _Bool AntiAliasedLines;
    _Bool AntiAliasedFill;
    float CurveTessellationTol;
    ImVec4 Colors[ImGuiCol_COUNT];
};
struct ImGuiIO
{
    ImGuiConfigFlags ConfigFlags;
    ImGuiBackendFlags BackendFlags;
    ImVec2 DisplaySize;
    float DeltaTime;
    float IniSavingRate;
    const char* IniFilename;
    const char* LogFilename;
    float MouseDoubleClickTime;
    float MouseDoubleClickMaxDist;
    float MouseDragThreshold;
    int KeyMap[ImGuiKey_COUNT];
    float KeyRepeatDelay;
    float KeyRepeatRate;
    void* UserData;
    ImFontAtlas* Fonts;
    float FontGlobalScale;
    _Bool FontAllowUserScaling;
    ImFont* FontDefault;
    ImVec2 DisplayFramebufferScale;
    ImVec2 DisplayVisibleMin;
    ImVec2 DisplayVisibleMax;
    _Bool OptMacOSXBehaviors;
    _Bool OptCursorBlink;
    const char* (*GetClipboardTextFn)(void* user_data);
    void (*SetClipboardTextFn)(void* user_data, const char* text);
    void* ClipboardUserData;
    void (*ImeSetInputScreenPosFn)(int x, int y);
    void* ImeWindowHandle;
    void* RenderDrawListsFnDummy;
    ImVec2 MousePos;
    _Bool MouseDown[5];
    float MouseWheel;
    float MouseWheelH;
    _Bool MouseDrawCursor;
    _Bool KeyCtrl;
    _Bool KeyShift;
    _Bool KeyAlt;
    _Bool KeySuper;
    _Bool KeysDown[512];
    ImWchar InputCharacters[16+1];
    float NavInputs[ImGuiNavInput_COUNT];
    _Bool WantCaptureMouse;
    _Bool WantCaptureKeyboard;
    _Bool WantTextInput;
    _Bool WantSetMousePos;
    _Bool WantSaveIniSettings;
    _Bool NavActive;
    _Bool NavVisible;
    float Framerate;
    int MetricsRenderVertices;
    int MetricsRenderIndices;
    int MetricsActiveWindows;
    ImVec2 MouseDelta;
    ImVec2 MousePosPrev;
    ImVec2 MouseClickedPos[5];
    float MouseClickedTime[5];
    _Bool MouseClicked[5];
    _Bool MouseDoubleClicked[5];
    _Bool MouseReleased[5];
    _Bool MouseDownOwned[5];
    float MouseDownDuration[5];
    float MouseDownDurationPrev[5];
    ImVec2 MouseDragMaxDistanceAbs[5];
    float MouseDragMaxDistanceSqr[5];
    float KeysDownDuration[512];
    float KeysDownDurationPrev[512];
    float NavInputsDownDuration[ImGuiNavInput_COUNT];
    float NavInputsDownDurationPrev[ImGuiNavInput_COUNT];
};
struct ImVector
{
    int Size;
    int Capacity;
    void* Data;
};
typedef struct ImVector ImVector;
struct ImNewDummy {};
struct ImGuiOnceUponAFrame
{
     int RefFrame;
};
struct ImGuiTextFilter
{
    char InputBuf[256];
    ImVector Filters;
    int CountGrep;
};
struct ImGuiTextBuffer
{
    ImVector Buf;
};
struct ImGuiStorage
{
    ImVector Data;
};
struct ImGuiTextEditCallbackData
{
    ImGuiInputTextFlags EventFlag;
    ImGuiInputTextFlags Flags;
    void* UserData;
    _Bool ReadOnly;
    ImWchar EventChar;
    ImGuiKey EventKey;
    char* Buf;
    int BufTextLen;
    int BufSize;
    _Bool BufDirty;
    int CursorPos;
    int SelectionStart;
    int SelectionEnd;
};
struct ImGuiSizeCallbackData
{
    void* UserData;
    ImVec2 Pos;
    ImVec2 CurrentSize;
    ImVec2 DesiredSize;
};
struct ImGuiPayload
{
    void* Data;
    int DataSize;
    ImGuiID SourceId;
    ImGuiID SourceParentId;
    int DataFrameCount;
    char DataType[32+1];
    _Bool Preview;
    _Bool Delivery;
};
struct ImColor
{
    ImVec4 Value;
};
struct ImGuiListClipper
{
    float StartPosY;
    float ItemsHeight;
    int ItemsCount, StepNo, DisplayStart, DisplayEnd;
};
typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);
struct ImDrawCmd
{
    unsigned int ElemCount;
    ImVec4 ClipRect;
    ImTextureID TextureId;
    ImDrawCallback UserCallback;
    void* UserCallbackData;
};
typedef unsigned short ImDrawIdx;
struct ImDrawVert
{
    ImVec2 pos;
    ImVec2 uv;
    ImU32 col;
};
struct ImDrawChannel
{
    ImVector CmdBuffer;
    ImVector IdxBuffer;
};
enum ImDrawCornerFlags_
{
    ImDrawCornerFlags_TopLeft = 1 << 0,
    ImDrawCornerFlags_TopRight = 1 << 1,
    ImDrawCornerFlags_BotLeft = 1 << 2,
    ImDrawCornerFlags_BotRight = 1 << 3,
    ImDrawCornerFlags_Top = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,
    ImDrawCornerFlags_Bot = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,
    ImDrawCornerFlags_Left = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,
    ImDrawCornerFlags_Right = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight,
    ImDrawCornerFlags_All = 0xF
};
enum ImDrawListFlags_
{
    ImDrawListFlags_AntiAliasedLines = 1 << 0,
    ImDrawListFlags_AntiAliasedFill = 1 << 1
};
struct ImDrawList
{
    ImVector CmdBuffer;
    ImVector IdxBuffer;
    ImVector VtxBuffer;
    ImDrawListFlags Flags;
    const ImDrawListSharedData* _Data;
    const char* _OwnerName;
    unsigned int _VtxCurrentIdx;
    ImDrawVert* _VtxWritePtr;
    ImDrawIdx* _IdxWritePtr;
    ImVector _ClipRectStack;
    ImVector _TextureIdStack;
    ImVector _Path;
    int _ChannelsCurrent;
    int _ChannelsCount;
    ImVector _Channels;
};
struct ImDrawData
{
    _Bool Valid;
    ImDrawList** CmdLists;
    int CmdListsCount;
    int TotalIdxCount;
    int TotalVtxCount;
    ImVec2 DisplayPos;
    ImVec2 DisplaySize;
};
struct ImFontConfig
{
    void* FontData;
    int FontDataSize;
    _Bool FontDataOwnedByAtlas;
    int FontNo;
    float SizePixels;
    int OversampleH;
    int OversampleV;
    _Bool PixelSnapH;
    ImVec2 GlyphExtraSpacing;
    ImVec2 GlyphOffset;
    const ImWchar* GlyphRanges;
    float GlyphMinAdvanceX;
    float GlyphMaxAdvanceX;
    _Bool MergeMode;
    unsigned int RasterizerFlags;
    float RasterizerMultiply;
    char Name[40];
    ImFont* DstFont;
};
struct ImFontGlyph
{
    ImWchar Codepoint;
    float AdvanceX;
    float X0, Y0, X1, Y1;
    float U0, V0, U1, V1;
};
enum ImFontAtlasFlags_
{
    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,
    ImFontAtlasFlags_NoMouseCursors = 1 << 1
};
struct ImFontAtlas
{
    ImFontAtlasFlags Flags;
    ImTextureID TexID;
    int TexDesiredWidth;
    int TexGlyphPadding;
    unsigned char* TexPixelsAlpha8;
    unsigned int* TexPixelsRGBA32;
    int TexWidth;
    int TexHeight;
    ImVec2 TexUvScale;
    ImVec2 TexUvWhitePixel;
    ImVector Fonts;
    ImVector CustomRects;
    ImVector ConfigData;
    int CustomRectIds[1];
};
struct ImFont
{
    float FontSize;
    float Scale;
    ImVec2 DisplayOffset;
    ImVector Glyphs;
    ImVector IndexAdvanceX;
    ImVector IndexLookup;
    const ImFontGlyph* FallbackGlyph;
    float FallbackAdvanceX;
    ImWchar FallbackChar;
    short ConfigDataCount;
    ImFontConfig* ConfigData;
    ImFontAtlas* ContainerAtlas;
    float Ascent, Descent;
    _Bool DirtyLookupTables;
    int MetricsTotalSurface;
};
    struct GlyphRangesBuilder
    {
        ImVector UsedChars;
    };
    struct CustomRect
    {
        unsigned int ID;
        unsigned short Width, Height;
        unsigned short X, Y;
        float GlyphAdvanceX;
        ImVec2 GlyphOffset;
        ImFont* Font;
    };
    struct TextRange
    {
        const char* b;
        const char* e;
    };
    struct Pair
    {
        ImGuiID key;
        union { int val_i; float val_f; void* val_p; };
    };
typedef ImVector ImVector_TextRange;
typedef ImVector ImVector_ImWchar;
 ImGuiContext* igCreateContext(ImFontAtlas* shared_font_atlas);
 void igDestroyContext(ImGuiContext* ctx);
 ImGuiContext* igGetCurrentContext();
 void igSetCurrentContext(ImGuiContext* ctx);
 _Bool igDebugCheckVersionAndDataLayout(const char* version_str,size_t sz_io,size_t sz_style,size_t sz_vec2,size_t sz_vec4,size_t sz_drawvert);
 ImGuiIO* igGetIO();
 ImGuiStyle* igGetStyle();
 void igNewFrame();
 void igEndFrame();
 void igRender();
 ImDrawData* igGetDrawData();
 void igShowDemoWindow(_Bool* p_open);
 void igShowMetricsWindow(_Bool* p_open);
 void igShowStyleEditor(ImGuiStyle* ref);
 _Bool igShowStyleSelector(const char* label);
 void igShowFontSelector(const char* label);
 void igShowUserGuide();
 const char* igGetVersion();
 void igStyleColorsDark(ImGuiStyle* dst);
 void igStyleColorsClassic(ImGuiStyle* dst);
 void igStyleColorsLight(ImGuiStyle* dst);
 _Bool igBegin(const char* name,_Bool* p_open,ImGuiWindowFlags flags);
 void igEnd();
 _Bool igBeginChild(const char* str_id,const ImVec2 size,_Bool border,ImGuiWindowFlags flags);
 _Bool igBeginChildID(ImGuiID id,const ImVec2 size,_Bool border,ImGuiWindowFlags flags);
 void igEndChild();
 _Bool igIsWindowAppearing();
 _Bool igIsWindowCollapsed();
 _Bool igIsWindowFocused(ImGuiFocusedFlags flags);
 _Bool igIsWindowHovered(ImGuiHoveredFlags flags);
 ImDrawList* igGetWindowDrawList();
 ImVec2 igGetWindowPos();
 ImVec2 igGetWindowSize();
 float igGetWindowWidth();
 float igGetWindowHeight();
 ImVec2 igGetContentRegionMax();
 ImVec2 igGetContentRegionAvail();
 float igGetContentRegionAvailWidth();
 ImVec2 igGetWindowContentRegionMin();
 ImVec2 igGetWindowContentRegionMax();
 float igGetWindowContentRegionWidth();
 void igSetNextWindowPos(const ImVec2 pos,ImGuiCond cond,const ImVec2 pivot);
 void igSetNextWindowSize(const ImVec2 size,ImGuiCond cond);
 void igSetNextWindowSizeConstraints(const ImVec2 size_min,const ImVec2 size_max,ImGuiSizeCallback custom_callback,void* custom_callback_data);
 void igSetNextWindowContentSize(const ImVec2 size);
 void igSetNextWindowCollapsed(_Bool collapsed,ImGuiCond cond);
 void igSetNextWindowFocus();
 void igSetNextWindowBgAlpha(float alpha);
 void igSetWindowPosVec2(const ImVec2 pos,ImGuiCond cond);
 void igSetWindowSizeVec2(const ImVec2 size,ImGuiCond cond);
 void igSetWindowCollapsedBool(_Bool collapsed,ImGuiCond cond);
 void igSetWindowFocus();
 void igSetWindowFontScale(float scale);
 void igSetWindowPosStr(const char* name,const ImVec2 pos,ImGuiCond cond);
 void igSetWindowSizeStr(const char* name,const ImVec2 size,ImGuiCond cond);
 void igSetWindowCollapsedStr(const char* name,_Bool collapsed,ImGuiCond cond);
 void igSetWindowFocusStr(const char* name);
 float igGetScrollX();
 float igGetScrollY();
 float igGetScrollMaxX();
 float igGetScrollMaxY();
 void igSetScrollX(float scroll_x);
 void igSetScrollY(float scroll_y);
 void igSetScrollHere(float center_y_ratio);
 void igSetScrollFromPosY(float pos_y,float center_y_ratio);
 void igPushFont(ImFont* font);
 void igPopFont();
 void igPushStyleColorU32(ImGuiCol idx,ImU32 col);
 void igPushStyleColor(ImGuiCol idx,const ImVec4 col);
 void igPopStyleColor(int count);
 void igPushStyleVarFloat(ImGuiStyleVar idx,float val);
 void igPushStyleVarVec2(ImGuiStyleVar idx,const ImVec2 val);
 void igPopStyleVar(int count);
 const ImVec4* igGetStyleColorVec4(ImGuiCol idx);
 ImFont* igGetFont();
 float igGetFontSize();
 ImVec2 igGetFontTexUvWhitePixel();
 ImU32 igGetColorU32(ImGuiCol idx,float alpha_mul);
 ImU32 igGetColorU32Vec4(const ImVec4 col);
 ImU32 igGetColorU32U32(ImU32 col);
 void igPushItemWidth(float item_width);
 void igPopItemWidth();
 float igCalcItemWidth();
 void igPushTextWrapPos(float wrap_pos_x);
 void igPopTextWrapPos();
 void igPushAllowKeyboardFocus(_Bool allow_keyboard_focus);
 void igPopAllowKeyboardFocus();
 void igPushButtonRepeat(_Bool repeat);
 void igPopButtonRepeat();
 void igSeparator();
 void igSameLine(float pos_x,float spacing_w);
 void igNewLine();
 void igSpacing();
 void igDummy(const ImVec2 size);
 void igIndent(float indent_w);
 void igUnindent(float indent_w);
 void igBeginGroup();
 void igEndGroup();
 ImVec2 igGetCursorPos();
 float igGetCursorPosX();
 float igGetCursorPosY();
 void igSetCursorPos(const ImVec2 local_pos);
 void igSetCursorPosX(float x);
 void igSetCursorPosY(float y);
 ImVec2 igGetCursorStartPos();
 ImVec2 igGetCursorScreenPos();
 void igSetCursorScreenPos(const ImVec2 screen_pos);
 void igAlignTextToFramePadding();
 float igGetTextLineHeight();
 float igGetTextLineHeightWithSpacing();
 float igGetFrameHeight();
 float igGetFrameHeightWithSpacing();
 void igPushIDStr(const char* str_id);
 void igPushIDRange(const char* str_id_begin,const char* str_id_end);
 void igPushIDPtr(const void* ptr_id);
 void igPushIDInt(int int_id);
 void igPopID();
 ImGuiID igGetIDStr(const char* str_id);
 ImGuiID igGetIDStrStr(const char* str_id_begin,const char* str_id_end);
 ImGuiID igGetIDPtr(const void* ptr_id);
 void igTextUnformatted(const char* text,const char* text_end);
 void igText(const char* fmt,...);
 void igTextV(const char* fmt,va_list args);
 void igTextColored(const ImVec4 col,const char* fmt,...);
 void igTextColoredV(const ImVec4 col,const char* fmt,va_list args);
 void igTextDisabled(const char* fmt,...);
 void igTextDisabledV(const char* fmt,va_list args);
 void igTextWrapped(const char* fmt,...);
 void igTextWrappedV(const char* fmt,va_list args);
 void igLabelText(const char* label,const char* fmt,...);
 void igLabelTextV(const char* label,const char* fmt,va_list args);
 void igBulletText(const char* fmt,...);
 void igBulletTextV(const char* fmt,va_list args);
 _Bool igButton(const char* label,const ImVec2 size);
 _Bool igSmallButton(const char* label);
 _Bool igInvisibleButton(const char* str_id,const ImVec2 size);
 _Bool igArrowButton(const char* str_id,ImGuiDir dir);
 void igImage(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col,const ImVec4 border_col);
 _Bool igImageButton(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,int frame_padding,const ImVec4 bg_col,const ImVec4 tint_col);
 _Bool igCheckbox(const char* label,_Bool* v);
 _Bool igCheckboxFlags(const char* label,unsigned int* flags,unsigned int flags_value);
 _Bool igRadioButtonBool(const char* label,_Bool active);
 _Bool igRadioButtonIntPtr(const char* label,int* v,int v_button);
 void igPlotLines(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
 void igPlotLinesFnPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
 void igPlotHistogramFloatPtr(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
 void igPlotHistogramFnPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
 void igProgressBar(float fraction,const ImVec2 size_arg,const char* overlay);
 void igBullet();
 _Bool igBeginCombo(const char* label,const char* preview_value,ImGuiComboFlags flags);
 void igEndCombo();
 _Bool igCombo(const char* label,int* current_item,const char* const items[],int items_count,int popup_max_height_in_items);
 _Bool igComboStr(const char* label,int* current_item,const char* items_separated_by_zeros,int popup_max_height_in_items);
 _Bool igComboFnPtr(const char* label,int* current_item,_Bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int popup_max_height_in_items);
 _Bool igDragFloat(const char* label,float* v,float v_speed,float v_min,float v_max,const char* format,float power);
 _Bool igDragFloat2(const char* label,float v[2],float v_speed,float v_min,float v_max,const char* format,float power);
 _Bool igDragFloat3(const char* label,float v[3],float v_speed,float v_min,float v_max,const char* format,float power);
 _Bool igDragFloat4(const char* label,float v[4],float v_speed,float v_min,float v_max,const char* format,float power);
 _Bool igDragFloatRange2(const char* label,float* v_current_min,float* v_current_max,float v_speed,float v_min,float v_max,const char* format,const char* format_max,float power);
 _Bool igDragInt(const char* label,int* v,float v_speed,int v_min,int v_max,const char* format);
 _Bool igDragInt2(const char* label,int v[2],float v_speed,int v_min,int v_max,const char* format);
 _Bool igDragInt3(const char* label,int v[3],float v_speed,int v_min,int v_max,const char* format);
 _Bool igDragInt4(const char* label,int v[4],float v_speed,int v_min,int v_max,const char* format);
 _Bool igDragIntRange2(const char* label,int* v_current_min,int* v_current_max,float v_speed,int v_min,int v_max,const char* format,const char* format_max);
 _Bool igDragScalar(const char* label,ImGuiDataType data_type,void* v,float v_speed,const void* v_min,const void* v_max,const char* format,float power);
 _Bool igDragScalarN(const char* label,ImGuiDataType data_type,void* v,int components,float v_speed,const void* v_min,const void* v_max,const char* format,float power);
 _Bool igInputText(const char* label,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiTextEditCallback callback,void* user_data);
 _Bool igInputTextMultiline(const char* label,char* buf,size_t buf_size,const ImVec2 size,ImGuiInputTextFlags flags,ImGuiTextEditCallback callback,void* user_data);
 _Bool igInputFloat(const char* label,float* v,float step,float step_fast,const char* format,ImGuiInputTextFlags extra_flags);
 _Bool igInputFloat2(const char* label,float v[2],const char* format,ImGuiInputTextFlags extra_flags);
 _Bool igInputFloat3(const char* label,float v[3],const char* format,ImGuiInputTextFlags extra_flags);
 _Bool igInputFloat4(const char* label,float v[4],const char* format,ImGuiInputTextFlags extra_flags);
 _Bool igInputInt(const char* label,int* v,int step,int step_fast,ImGuiInputTextFlags extra_flags);
 _Bool igInputInt2(const char* label,int v[2],ImGuiInputTextFlags extra_flags);
 _Bool igInputInt3(const char* label,int v[3],ImGuiInputTextFlags extra_flags);
 _Bool igInputInt4(const char* label,int v[4],ImGuiInputTextFlags extra_flags);
 _Bool igInputDouble(const char* label,double* v,double step,double step_fast,const char* format,ImGuiInputTextFlags extra_flags);
 _Bool igInputScalar(const char* label,ImGuiDataType data_type,void* v,const void* step,const void* step_fast,const char* format,ImGuiInputTextFlags extra_flags);
 _Bool igInputScalarN(const char* label,ImGuiDataType data_type,void* v,int components,const void* step,const void* step_fast,const char* format,ImGuiInputTextFlags extra_flags);
 _Bool igSliderFloat(const char* label,float* v,float v_min,float v_max,const char* format,float power);
 _Bool igSliderFloat2(const char* label,float v[2],float v_min,float v_max,const char* format,float power);
 _Bool igSliderFloat3(const char* label,float v[3],float v_min,float v_max,const char* format,float power);
 _Bool igSliderFloat4(const char* label,float v[4],float v_min,float v_max,const char* format,float power);
 _Bool igSliderAngle(const char* label,float* v_rad,float v_degrees_min,float v_degrees_max);
 _Bool igSliderInt(const char* label,int* v,int v_min,int v_max,const char* format);
 _Bool igSliderInt2(const char* label,int v[2],int v_min,int v_max,const char* format);
 _Bool igSliderInt3(const char* label,int v[3],int v_min,int v_max,const char* format);
 _Bool igSliderInt4(const char* label,int v[4],int v_min,int v_max,const char* format);
 _Bool igSliderScalar(const char* label,ImGuiDataType data_type,void* v,const void* v_min,const void* v_max,const char* format,float power);
 _Bool igSliderScalarN(const char* label,ImGuiDataType data_type,void* v,int components,const void* v_min,const void* v_max,const char* format,float power);
 _Bool igVSliderFloat(const char* label,const ImVec2 size,float* v,float v_min,float v_max,const char* format,float power);
 _Bool igVSliderInt(const char* label,const ImVec2 size,int* v,int v_min,int v_max,const char* format);
 _Bool igVSliderScalar(const char* label,const ImVec2 size,ImGuiDataType data_type,void* v,const void* v_min,const void* v_max,const char* format,float power);
 _Bool igColorEdit3(const char* label,float col[3],ImGuiColorEditFlags flags);
 _Bool igColorEdit4(const char* label,float col[4],ImGuiColorEditFlags flags);
 _Bool igColorPicker3(const char* label,float col[3],ImGuiColorEditFlags flags);
 _Bool igColorPicker4(const char* label,float col[4],ImGuiColorEditFlags flags,const float* ref_col);
 _Bool igColorButton(const char* desc_id,const ImVec4 col,ImGuiColorEditFlags flags,ImVec2 size);
 void igSetColorEditOptions(ImGuiColorEditFlags flags);
 _Bool igTreeNodeStr(const char* label);
 _Bool igTreeNodeStrStr(const char* str_id,const char* fmt,...);
 _Bool igTreeNodePtr(const void* ptr_id,const char* fmt,...);
 _Bool igTreeNodeVStr(const char* str_id,const char* fmt,va_list args);
 _Bool igTreeNodeVPtr(const void* ptr_id,const char* fmt,va_list args);
 _Bool igTreeNodeExStr(const char* label,ImGuiTreeNodeFlags flags);
 _Bool igTreeNodeExStrStr(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,...);
 _Bool igTreeNodeExPtr(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,...);
 _Bool igTreeNodeExVStr(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args);
 _Bool igTreeNodeExVPtr(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args);
 void igTreePushStr(const char* str_id);
 void igTreePushPtr(const void* ptr_id);
 void igTreePop();
 void igTreeAdvanceToLabelPos();
 float igGetTreeNodeToLabelSpacing();
 void igSetNextTreeNodeOpen(_Bool is_open,ImGuiCond cond);
 _Bool igCollapsingHeader(const char* label,ImGuiTreeNodeFlags flags);
 _Bool igCollapsingHeaderBoolPtr(const char* label,_Bool* p_open,ImGuiTreeNodeFlags flags);
 _Bool igSelectable(const char* label,_Bool selected,ImGuiSelectableFlags flags,const ImVec2 size);
 _Bool igSelectableBoolPtr(const char* label,_Bool* p_selected,ImGuiSelectableFlags flags,const ImVec2 size);
 _Bool igListBoxStr_arr(const char* label,int* current_item,const char* const items[],int items_count,int height_in_items);
 _Bool igListBoxFnPtr(const char* label,int* current_item,_Bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int height_in_items);
 _Bool igListBoxHeaderVec2(const char* label,const ImVec2 size);
 _Bool igListBoxHeaderInt(const char* label,int items_count,int height_in_items);
 void igListBoxFooter();
 void igValueBool(const char* prefix,_Bool b);
 void igValueInt(const char* prefix,int v);
 void igValueUint(const char* prefix,unsigned int v);
 void igValueFloat(const char* prefix,float v,const char* float_format);
 void igBeginTooltip();
 void igEndTooltip();
 void igSetTooltip(const char* fmt,...);
 void igSetTooltipV(const char* fmt,va_list args);
 _Bool igBeginMainMenuBar();
 void igEndMainMenuBar();
 _Bool igBeginMenuBar();
 void igEndMenuBar();
 _Bool igBeginMenu(const char* label,_Bool enabled);
 void igEndMenu();
 _Bool igMenuItemBool(const char* label,const char* shortcut,_Bool selected,_Bool enabled);
 _Bool igMenuItemBoolPtr(const char* label,const char* shortcut,_Bool* p_selected,_Bool enabled);
 void igOpenPopup(const char* str_id);
 _Bool igBeginPopup(const char* str_id,ImGuiWindowFlags flags);
 _Bool igBeginPopupContextItem(const char* str_id,int mouse_button);
 _Bool igBeginPopupContextWindow(const char* str_id,int mouse_button,_Bool also_over_items);
 _Bool igBeginPopupContextVoid(const char* str_id,int mouse_button);
 _Bool igBeginPopupModal(const char* name,_Bool* p_open,ImGuiWindowFlags flags);
 void igEndPopup();
 _Bool igOpenPopupOnItemClick(const char* str_id,int mouse_button);
 _Bool igIsPopupOpen(const char* str_id);
 void igCloseCurrentPopup();
 void igColumns(int count,const char* id,_Bool border);
 void igNextColumn();
 int igGetColumnIndex();
 float igGetColumnWidth(int column_index);
 void igSetColumnWidth(int column_index,float width);
 float igGetColumnOffset(int column_index);
 void igSetColumnOffset(int column_index,float offset_x);
 int igGetColumnsCount();
 void igLogToTTY(int max_depth);
 void igLogToFile(int max_depth,const char* filename);
 void igLogToClipboard(int max_depth);
 void igLogFinish();
 void igLogButtons();
 _Bool igBeginDragDropSource(ImGuiDragDropFlags flags);
 _Bool igSetDragDropPayload(const char* type,const void* data,size_t size,ImGuiCond cond);
 void igEndDragDropSource();
 _Bool igBeginDragDropTarget();
 const ImGuiPayload* igAcceptDragDropPayload(const char* type,ImGuiDragDropFlags flags);
 void igEndDragDropTarget();
 void igPushClipRect(const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,_Bool intersect_with_current_clip_rect);
 void igPopClipRect();
 void igSetItemDefaultFocus();
 void igSetKeyboardFocusHere(int offset);
 _Bool igIsItemHovered(ImGuiHoveredFlags flags);
 _Bool igIsItemActive();
 _Bool igIsItemFocused();
 _Bool igIsItemClicked(int mouse_button);
 _Bool igIsItemVisible();
 _Bool igIsItemDeactivated();
 _Bool igIsItemDeactivatedAfterChange();
 _Bool igIsAnyItemHovered();
 _Bool igIsAnyItemActive();
 _Bool igIsAnyItemFocused();
 ImVec2 igGetItemRectMin();
 ImVec2 igGetItemRectMax();
 ImVec2 igGetItemRectSize();
 void igSetItemAllowOverlap();
 _Bool igIsRectVisible(const ImVec2 size);
 _Bool igIsRectVisibleVec2(const ImVec2 rect_min,const ImVec2 rect_max);
 float igGetTime();
 int igGetFrameCount();
 ImDrawList* igGetOverlayDrawList();
 ImDrawListSharedData* igGetDrawListSharedData();
 const char* igGetStyleColorName(ImGuiCol idx);
 void igSetStateStorage(ImGuiStorage* storage);
 ImGuiStorage* igGetStateStorage();
 ImVec2 igCalcTextSize(const char* text,const char* text_end,_Bool hide_text_after_double_hash,float wrap_width);
 void igCalcListClipping(int items_count,float items_height,int* out_items_display_start,int* out_items_display_end);
 _Bool igBeginChildFrame(ImGuiID id,const ImVec2 size,ImGuiWindowFlags flags);
 void igEndChildFrame();
 ImVec4 igColorConvertU32ToFloat4(ImU32 in);
 ImU32 igColorConvertFloat4ToU32(const ImVec4 in);
 void igColorConvertRGBtoHSV(float r,float g,float b,float out_h,float out_s,float out_v);
 void igColorConvertHSVtoRGB(float h,float s,float v,float out_r,float out_g,float out_b);
 int igGetKeyIndex(ImGuiKey imgui_key);
 _Bool igIsKeyDown(int user_key_index);
 _Bool igIsKeyPressed(int user_key_index,_Bool repeat);
 _Bool igIsKeyReleased(int user_key_index);
 int igGetKeyPressedAmount(int key_index,float repeat_delay,float rate);
 _Bool igIsMouseDown(int button);
 _Bool igIsAnyMouseDown();
 _Bool igIsMouseClicked(int button,_Bool repeat);
 _Bool igIsMouseDoubleClicked(int button);
 _Bool igIsMouseReleased(int button);
 _Bool igIsMouseDragging(int button,float lock_threshold);
 _Bool igIsMouseHoveringRect(const ImVec2 r_min,const ImVec2 r_max,_Bool clip);
 _Bool igIsMousePosValid(const ImVec2* mouse_pos);
 ImVec2 igGetMousePos();
 ImVec2 igGetMousePosOnOpeningCurrentPopup();
 ImVec2 igGetMouseDragDelta(int button,float lock_threshold);
 void igResetMouseDragDelta(int button);
 ImGuiMouseCursor igGetMouseCursor();
 void igSetMouseCursor(ImGuiMouseCursor type);
 void igCaptureKeyboardFromApp(_Bool capture);
 void igCaptureMouseFromApp(_Bool capture);
 const char* igGetClipboardText();
 void igSetClipboardText(const char* text);
 void igLoadIniSettingsFromDisk(const char* ini_filename);
 void igLoadIniSettingsFromMemory(const char* ini_data,size_t ini_size);
 void igSaveIniSettingsToDisk(const char* ini_filename);
 const char* igSaveIniSettingsToMemory(size_t* out_ini_size);
 void igSetAllocatorFunctions(void*(*alloc_func)(size_t sz,void* user_data),void(*free_func)(void* ptr,void* user_data),void* user_data);
 void* igMemAlloc(size_t size);
 void igMemFree(void* ptr);
 void ImGuiStyle_ScaleAllSizes(ImGuiStyle* self,float scale_factor);
 void ImGuiIO_AddInputCharacter(ImGuiIO* self,ImWchar c);
 void ImGuiIO_AddInputCharactersUTF8(ImGuiIO* self,const char* utf8_chars);
 void ImGuiIO_ClearInputCharacters(ImGuiIO* self);
 const char* TextRange_begin(TextRange* self);
 const char* TextRange_end(TextRange* self);
 _Bool TextRange_empty(TextRange* self);
 char TextRange_front(TextRange* self);
 _Bool TextRange_is_blank(TextRange* self,char c);
 void TextRange_trim_blanks(TextRange* self);
 void TextRange_split(TextRange* self,char separator,ImVector_TextRange out);
 _Bool ImGuiTextFilter_Draw(ImGuiTextFilter* self,const char* label,float width);
 _Bool ImGuiTextFilter_PassFilter(ImGuiTextFilter* self,const char* text,const char* text_end);
 void ImGuiTextFilter_Build(ImGuiTextFilter* self);
 void ImGuiTextFilter_Clear(ImGuiTextFilter* self);
 _Bool ImGuiTextFilter_IsActive(ImGuiTextFilter* self);
 const char* ImGuiTextBuffer_begin(ImGuiTextBuffer* self);
 const char* ImGuiTextBuffer_end(ImGuiTextBuffer* self);
 int ImGuiTextBuffer_size(ImGuiTextBuffer* self);
 _Bool ImGuiTextBuffer_empty(ImGuiTextBuffer* self);
 void ImGuiTextBuffer_clear(ImGuiTextBuffer* self);
 void ImGuiTextBuffer_reserve(ImGuiTextBuffer* self,int capacity);
 const char* ImGuiTextBuffer_c_str(ImGuiTextBuffer* self);
 void ImGuiTextBuffer_appendfv(ImGuiTextBuffer* self,const char* fmt,va_list args);
 void ImGuiStorage_Clear(ImGuiStorage* self);
 int ImGuiStorage_GetInt(ImGuiStorage* self,ImGuiID key,int default_val);
 void ImGuiStorage_SetInt(ImGuiStorage* self,ImGuiID key,int val);
 _Bool ImGuiStorage_GetBool(ImGuiStorage* self,ImGuiID key,_Bool default_val);
 void ImGuiStorage_SetBool(ImGuiStorage* self,ImGuiID key,_Bool val);
 float ImGuiStorage_GetFloat(ImGuiStorage* self,ImGuiID key,float default_val);
 void ImGuiStorage_SetFloat(ImGuiStorage* self,ImGuiID key,float val);
 void* ImGuiStorage_GetVoidPtr(ImGuiStorage* self,ImGuiID key);
 void ImGuiStorage_SetVoidPtr(ImGuiStorage* self,ImGuiID key,void* val);
 int* ImGuiStorage_GetIntRef(ImGuiStorage* self,ImGuiID key,int default_val);
 _Bool* ImGuiStorage_GetBoolRef(ImGuiStorage* self,ImGuiID key,_Bool default_val);
 float* ImGuiStorage_GetFloatRef(ImGuiStorage* self,ImGuiID key,float default_val);
 void** ImGuiStorage_GetVoidPtrRef(ImGuiStorage* self,ImGuiID key,void* default_val);
 void ImGuiStorage_SetAllInt(ImGuiStorage* self,int val);
 void ImGuiStorage_BuildSortByKey(ImGuiStorage* self);
 void ImGuiTextEditCallbackData_DeleteChars(ImGuiTextEditCallbackData* self,int pos,int bytes_count);
 void ImGuiTextEditCallbackData_InsertChars(ImGuiTextEditCallbackData* self,int pos,const char* text,const char* text_end);
 _Bool ImGuiTextEditCallbackData_HasSelection(ImGuiTextEditCallbackData* self);
 void ImGuiPayload_Clear(ImGuiPayload* self);
 _Bool ImGuiPayload_IsDataType(ImGuiPayload* self,const char* type);
 _Bool ImGuiPayload_IsPreview(ImGuiPayload* self);
 _Bool ImGuiPayload_IsDelivery(ImGuiPayload* self);
 void ImColor_SetHSV(ImColor* self,float h,float s,float v,float a);
 ImColor ImColor_HSV(ImColor* self,float h,float s,float v,float a);
 _Bool ImGuiListClipper_Step(ImGuiListClipper* self);
 void ImGuiListClipper_Begin(ImGuiListClipper* self,int items_count,float items_height);
 void ImGuiListClipper_End(ImGuiListClipper* self);
 void ImDrawList_PushClipRect(ImDrawList* self,ImVec2 clip_rect_min,ImVec2 clip_rect_max,_Bool intersect_with_current_clip_rect);
 void ImDrawList_PushClipRectFullScreen(ImDrawList* self);
 void ImDrawList_PopClipRect(ImDrawList* self);
 void ImDrawList_PushTextureID(ImDrawList* self,ImTextureID texture_id);
 void ImDrawList_PopTextureID(ImDrawList* self);
 ImVec2 ImDrawList_GetClipRectMin(ImDrawList* self);
 ImVec2 ImDrawList_GetClipRectMax(ImDrawList* self);
 void ImDrawList_AddLine(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col,float thickness);
 void ImDrawList_AddRect(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col,float rounding,int rounding_corners_flags,float thickness);
 void ImDrawList_AddRectFilled(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col,float rounding,int rounding_corners_flags);
 void ImDrawList_AddRectFilledMultiColor(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col_upr_left,ImU32 col_upr_right,ImU32 col_bot_right,ImU32 col_bot_left);
 void ImDrawList_AddQuad(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,ImU32 col,float thickness);
 void ImDrawList_AddQuadFilled(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,ImU32 col);
 void ImDrawList_AddTriangle(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,ImU32 col,float thickness);
 void ImDrawList_AddTriangleFilled(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,ImU32 col);
 void ImDrawList_AddCircle(ImDrawList* self,const ImVec2 centre,float radius,ImU32 col,int num_segments,float thickness);
 void ImDrawList_AddCircleFilled(ImDrawList* self,const ImVec2 centre,float radius,ImU32 col,int num_segments);
 void ImDrawList_AddText(ImDrawList* self,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end);
 void ImDrawList_AddTextFontPtr(ImDrawList* self,const ImFont* font,float font_size,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end,float wrap_width,const ImVec4* cpu_fine_clip_rect);
 void ImDrawList_AddImage(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col);
 void ImDrawList_AddImageQuad(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,const ImVec2 uv_a,const ImVec2 uv_b,const ImVec2 uv_c,const ImVec2 uv_d,ImU32 col);
 void ImDrawList_AddImageRounded(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col,float rounding,int rounding_corners);
 void ImDrawList_AddPolyline(ImDrawList* self,const ImVec2* points,const int num_points,ImU32 col,_Bool closed,float thickness);
 void ImDrawList_AddConvexPolyFilled(ImDrawList* self,const ImVec2* points,const int num_points,ImU32 col);
 void ImDrawList_AddBezierCurve(ImDrawList* self,const ImVec2 pos0,const ImVec2 cp0,const ImVec2 cp1,const ImVec2 pos1,ImU32 col,float thickness,int num_segments);
 void ImDrawList_PathClear(ImDrawList* self);
 void ImDrawList_PathLineTo(ImDrawList* self,const ImVec2 pos);
 void ImDrawList_PathLineToMergeDuplicate(ImDrawList* self,const ImVec2 pos);
 void ImDrawList_PathFillConvex(ImDrawList* self,ImU32 col);
 void ImDrawList_PathStroke(ImDrawList* self,ImU32 col,_Bool closed,float thickness);
 void ImDrawList_PathArcTo(ImDrawList* self,const ImVec2 centre,float radius,float a_min,float a_max,int num_segments);
 void ImDrawList_PathArcToFast(ImDrawList* self,const ImVec2 centre,float radius,int a_min_of_12,int a_max_of_12);
 void ImDrawList_PathBezierCurveTo(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,int num_segments);
 void ImDrawList_PathRect(ImDrawList* self,const ImVec2 rect_min,const ImVec2 rect_max,float rounding,int rounding_corners_flags);
 void ImDrawList_ChannelsSplit(ImDrawList* self,int channels_count);
 void ImDrawList_ChannelsMerge(ImDrawList* self);
 void ImDrawList_ChannelsSetCurrent(ImDrawList* self,int channel_index);
 void ImDrawList_AddCallback(ImDrawList* self,ImDrawCallback callback,void* callback_data);
 void ImDrawList_AddDrawCmd(ImDrawList* self);
 ImDrawList* ImDrawList_CloneOutput(ImDrawList* self);
 void ImDrawList_Clear(ImDrawList* self);
 void ImDrawList_ClearFreeMemory(ImDrawList* self);
 void ImDrawList_PrimReserve(ImDrawList* self,int idx_count,int vtx_count);
 void ImDrawList_PrimRect(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col);
 void ImDrawList_PrimRectUV(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col);
 void ImDrawList_PrimQuadUV(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,const ImVec2 uv_a,const ImVec2 uv_b,const ImVec2 uv_c,const ImVec2 uv_d,ImU32 col);
 void ImDrawList_PrimWriteVtx(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
 void ImDrawList_PrimWriteIdx(ImDrawList* self,ImDrawIdx idx);
 void ImDrawList_PrimVtx(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
 void ImDrawList_UpdateClipRect(ImDrawList* self);
 void ImDrawList_UpdateTextureID(ImDrawList* self);
 void ImDrawData_Clear(ImDrawData* self);
 void ImDrawData_DeIndexAllBuffers(ImDrawData* self);
 void ImDrawData_ScaleClipRects(ImDrawData* self,const ImVec2 sc);
 ImFont* ImFontAtlas_AddFont(ImFontAtlas* self,const ImFontConfig* font_cfg);
 ImFont* ImFontAtlas_AddFontDefault(ImFontAtlas* self,const ImFontConfig* font_cfg);
 ImFont* ImFontAtlas_AddFontFromFileTTF(ImFontAtlas* self,const char* filename,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
 ImFont* ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas* self,void* font_data,int font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
 ImFont* ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas* self,const void* compressed_font_data,int compressed_font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
 ImFont* ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas* self,const char* compressed_font_data_base85,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
 void ImFontAtlas_ClearInputData(ImFontAtlas* self);
 void ImFontAtlas_ClearTexData(ImFontAtlas* self);
 void ImFontAtlas_ClearFonts(ImFontAtlas* self);
 void ImFontAtlas_Clear(ImFontAtlas* self);
 _Bool ImFontAtlas_Build(ImFontAtlas* self);
 _Bool ImFontAtlas_IsBuilt(ImFontAtlas* self);
 void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
 void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
 void ImFontAtlas_SetTexID(ImFontAtlas* self,ImTextureID id);
 const ImWchar* ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas* self);
 const ImWchar* ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas* self);
 const ImWchar* ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas* self);
 const ImWchar* ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas* self);
 const ImWchar* ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas* self);
 const ImWchar* ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas* self);
 const ImWchar* ImFontAtlas_GetGlyphRangesThai(ImFontAtlas* self);
 _Bool GlyphRangesBuilder_GetBit(GlyphRangesBuilder* self,int n);
 void GlyphRangesBuilder_SetBit(GlyphRangesBuilder* self,int n);
 void GlyphRangesBuilder_AddChar(GlyphRangesBuilder* self,ImWchar c);
 void GlyphRangesBuilder_AddText(GlyphRangesBuilder* self,const char* text,const char* text_end);
 void GlyphRangesBuilder_AddRanges(GlyphRangesBuilder* self,const ImWchar* ranges);
 void GlyphRangesBuilder_BuildRanges(GlyphRangesBuilder* self,ImVector_ImWchar* out_ranges);
 _Bool CustomRect_IsPacked(CustomRect* self);
 int ImFontAtlas_AddCustomRectRegular(ImFontAtlas* self,unsigned int id,int width,int height);
 int ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas* self,ImFont* font,ImWchar id,int width,int height,float advance_x,const ImVec2 offset);
 const CustomRect* ImFontAtlas_GetCustomRectByIndex(ImFontAtlas* self,int index);
 void ImFontAtlas_CalcCustomRectUV(ImFontAtlas* self,const CustomRect* rect,ImVec2* out_uv_min,ImVec2* out_uv_max);
 _Bool ImFontAtlas_GetMouseCursorTexData(ImFontAtlas* self,ImGuiMouseCursor cursor,ImVec2* out_offset,ImVec2* out_size,ImVec2 out_uv_border[2],ImVec2 out_uv_fill[2]);
 void ImFont_ClearOutputData(ImFont* self);
 void ImFont_BuildLookupTable(ImFont* self);
 const ImFontGlyph* ImFont_FindGlyph(ImFont* self,ImWchar c);
 const ImFontGlyph* ImFont_FindGlyphNoFallback(ImFont* self,ImWchar c);
 void ImFont_SetFallbackChar(ImFont* self,ImWchar c);
 float ImFont_GetCharAdvance(ImFont* self,ImWchar c);
 _Bool ImFont_IsLoaded(ImFont* self);
 const char* ImFont_GetDebugName(ImFont* self);
 ImVec2 ImFont_CalcTextSizeA(ImFont* self,float size,float max_width,float wrap_width,const char* text_begin,const char* text_end,const char** remaining);
 const char* ImFont_CalcWordWrapPositionA(ImFont* self,float scale,const char* text,const char* text_end,float wrap_width);
 void ImFont_RenderChar(ImFont* self,ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,unsigned short c);
 void ImFont_RenderText(ImFont* self,ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,const ImVec4 clip_rect,const char* text_begin,const char* text_end,float wrap_width,_Bool cpu_fine_clip);
 void ImFont_GrowIndex(ImFont* self,int new_size);
 void ImFont_AddGlyph(ImFont* self,ImWchar c,float x0,float y0,float x1,float y1,float u0,float v0,float u1,float v1,float advance_x);
 void ImFont_AddRemapChar(ImFont* self,ImWchar dst,ImWchar src,_Bool overwrite_dst);
 void igGetWindowPos_nonUDT(ImVec2 *pOut);
 void igGetWindowSize_nonUDT(ImVec2 *pOut);
 void igGetContentRegionMax_nonUDT(ImVec2 *pOut);
 void igGetContentRegionAvail_nonUDT(ImVec2 *pOut);
 void igGetWindowContentRegionMin_nonUDT(ImVec2 *pOut);
 void igGetWindowContentRegionMax_nonUDT(ImVec2 *pOut);
 void igGetFontTexUvWhitePixel_nonUDT(ImVec2 *pOut);
 void igGetCursorPos_nonUDT(ImVec2 *pOut);
 void igGetCursorStartPos_nonUDT(ImVec2 *pOut);
 void igGetCursorScreenPos_nonUDT(ImVec2 *pOut);
 void igGetItemRectMin_nonUDT(ImVec2 *pOut);
 void igGetItemRectMax_nonUDT(ImVec2 *pOut);
 void igGetItemRectSize_nonUDT(ImVec2 *pOut);
 void igCalcTextSize_nonUDT(ImVec2 *pOut,const char* text,const char* text_end,_Bool hide_text_after_double_hash,float wrap_width);
 void igColorConvertU32ToFloat4_nonUDT(ImVec4 *pOut,ImU32 in);
 void igGetMousePos_nonUDT(ImVec2 *pOut);
 void igGetMousePosOnOpeningCurrentPopup_nonUDT(ImVec2 *pOut);
 void igGetMouseDragDelta_nonUDT(ImVec2 *pOut,int button,float lock_threshold);
 void ImColor_HSV_nonUDT(ImColor* self,ImColor *pOut,float h,float s,float v,float a);
 void ImDrawList_GetClipRectMin_nonUDT(ImDrawList* self,ImVec2 *pOut);
 void ImDrawList_GetClipRectMax_nonUDT(ImDrawList* self,ImVec2 *pOut);
 void ImFont_CalcTextSizeA_nonUDT(ImFont* self,ImVec2 *pOut,float size,float max_width,float wrap_width,const char* text_begin,const char* text_end,const char** remaining);
 void igLogText(const char *fmt, ...);
 void ImGuiTextBuffer_appendf(struct ImGuiTextBuffer *buffer, const char *fmt, ...);
 void ImFontConfig_DefaultConstructor(ImFontConfig *config);
 float igGET_FLT_MAX();
]]
--[[ END AUTOGENERATED SEGMENT ]]
--[[ BEGIN AUTOGENERATED SEGMENT ]]
local cdecl = cdecl or ''
cdecl = cdecl..[[
struct GLFWwindow;
typedef struct GLFWwindow GLFWwindow;

typedef struct SDL_Window SDL_Window;
typedef struct GLFWwindow GLFWwindow;
struct SDL_Window;
typedef struct SDL_Window SDL_Window;

typedef union SDL_Event SDL_Event;
 bool ImGui_ImplGlfw_InitForOpenGL(GLFWwindow* window,bool install_callbacks);
 bool ImGui_ImplGlfw_InitForVulkan(GLFWwindow* window,bool install_callbacks);
 void ImGui_ImplGlfw_Shutdown();
 void ImGui_ImplGlfw_NewFrame();
 void ImGui_ImplGlfw_MouseButtonCallback(GLFWwindow* window,int button,int action,int mods);
 void ImGui_ImplGlfw_ScrollCallback(GLFWwindow* window,double xoffset,double yoffset);
 void ImGui_ImplGlfw_KeyCallback(GLFWwindow* window,int key,int scancode,int action,int mods);
 void ImGui_ImplGlfw_CharCallback(GLFWwindow* window,unsigned int c);
 bool ImGui_ImplOpenGL3_Init(const char* glsl_version);
 void ImGui_ImplOpenGL3_Shutdown();
 void ImGui_ImplOpenGL3_NewFrame();
 void ImGui_ImplOpenGL3_RenderDrawData(ImDrawData* draw_data);
 bool ImGui_ImplOpenGL3_CreateFontsTexture();
 void ImGui_ImplOpenGL3_DestroyFontsTexture();
 bool ImGui_ImplOpenGL3_CreateDeviceObjects();
 void ImGui_ImplOpenGL3_DestroyDeviceObjects();
 bool ImGui_ImplOpenGL2_Init();
 void ImGui_ImplOpenGL2_Shutdown();
 void ImGui_ImplOpenGL2_NewFrame();
 void ImGui_ImplOpenGL2_RenderDrawData(ImDrawData* draw_data);
 bool ImGui_ImplOpenGL2_CreateFontsTexture();
 void ImGui_ImplOpenGL2_DestroyFontsTexture();
 bool ImGui_ImplOpenGL2_CreateDeviceObjects();
 void ImGui_ImplOpenGL2_DestroyDeviceObjects();
 bool ImGui_ImplSDL2_InitForOpenGL(SDL_Window* window,void* sdl_gl_context);
 bool ImGui_ImplSDL2_InitForVulkan(SDL_Window* window);
 void ImGui_ImplSDL2_Shutdown();
 void ImGui_ImplSDL2_NewFrame(SDL_Window* window);
 bool ImGui_ImplSDL2_ProcessEvent(SDL_Event* event);
]]
--[[ END AUTOGENERATED SEGMENT ]]
local ffi = require"ffi"

--uncomment to debug cdef calls
---[[
local ffi_cdef = ffi.cdef
ffi.cdef = function(code)
    local ret,err = pcall(ffi_cdef,code)
    if not ret then
        local lineN = 1
        for line in code:gmatch("([^\n\r]*)\r?\n") do
            print(lineN, line)
            lineN = lineN + 1
        end
        print(err)
        error"bad cdef"
    end
end
--]]

assert(cdecl, "imgui.lua not properly build")
ffi.cdef(cdecl)

-- glfw3 implementation and extras ----------------------------------------
ffi.cdef[[

//////////////// glfw3 gl3 Implementation
int Do_gl3wInit(void);
typedef struct GLFWwindow GLFWwindow;
typedef struct {
    // Data
    GLFWwindow*  g_Window ;
    struct ImGuiContext* ctx;
    double       g_Time ;
    bool         g_MousePressed[3] ;
    float        g_MouseWheel;
    unsigned int g_FontTexture;
    int          g_ShaderHandle, g_VertHandle, g_FragHandle;
    int          g_AttribLocationTex, g_AttribLocationProjMtx;
    int          g_AttribLocationPosition, g_AttribLocationUV, g_AttribLocationColor;
    unsigned int g_VboHandle, g_VaoHandle, g_ElementsHandle;
}ImGui_ImplGlfwGL3;

ImGui_ImplGlfwGL3* ImGui_ImplGlfwGL3_new();
void ImGui_ImplGlfwGL3_delete(ImGui_ImplGlfwGL3*);
bool ImGui_ImplGlfwGL3_Init(ImGui_ImplGlfwGL3*,GLFWwindow* window, bool install_callbacks);
void ImGui_ImplGlfwGL3_NewFrame(ImGui_ImplGlfwGL3*);
void ImGui_ImplGlfwGL3_Render(ImGui_ImplGlfwGL3* impl);
// Use if you want to reset your rendering device without losing ImGui state.
void ImGui_ImplGlfwGL3_InvalidateDeviceObjects(ImGui_ImplGlfwGL3*);
void ImGui_ImplGlfwGL3_Set(ImGui_ImplGlfwGL3*);
//bool        ImGui_ImplGlfwGL3_CreateDeviceObjects();

// GLFW callbacks (installed by default if you enable 'install_callbacks' during initialization)
// Provided here if you want to chain callbacks.
// You can also handle inputs yourself and use those as a reference.
void ImGui_ImplGlfwGL3_MouseButtonCallback(GLFWwindow* window, int button, int action, int mods);
void ImGui_ImplGlfwGL3_ScrollCallback(GLFWwindow* window, double xoffset, double yoffset);
void ImGui_ImplGlfwGL3_KeyCallback(GLFWwindow* window, int key, int scancode, int action, int mods);
void ImGui_ImplGlfwGL3_CharCallback(GLFWwindow* window, unsigned int c);

//addons
bool Knob(const char* label, float* value_p, float minv, float maxv);
int Bezier( const char *label, float P[4] );
bool Curve(const char *label, const struct ImVec2& size, struct ImVec2 *points, const int maxpoints, float *data, int datalen);
void CurveGetData(struct ImVec2 *points, const int maxpoints, float *data, int datalen);
                                

//experiments
struct ImVec2 igGetCursorScreenPosORIG();
struct ImVec2 igGetCursorScreenPosORIG2();

//ImVec2 GetCursorScreenPos();
]]

ffi.cdef[[
//Log
typedef struct Log Log;
Log* Log_new();
void Log_Add(Log* log,const char* fmt, ...);
void Log_Draw(Log* log, const char* title); //, bool* p_open = NULL
void Log_delete(Log* log);  

]]



if jit.os == "Windows" then
ffi.cdef[[
 
// Helpers: UTF-8 <> wchar
int igImTextStrToUtf8(char* buf, int buf_size, const ImWchar* in_text, const ImWchar* in_text_end);      // return output UTF-8 bytes count 
int igImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end);          // return input UTF-8 bytes count 
int igImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_remaining);   // return input UTF-8 bytes count 
int igImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end);                            // return number of UTF-8 code-points (NOT bytes count) 
int igImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end);                   // return number of bytes to express string as UTF-8 code-points 
 
]]
end

--load dll
local lib = ffi.load(basedir.."libcimgui")

-----------ImVec2 definition
local ImVec2 
ImVec2 = ffi.metatype("ImVec2",{
    __add = function(a,b) return ImVec2(a.x + b.x, a.y + b.y) end,
    __sub = function(a,b) return ImVec2(a.x - b.x, a.y - b.y) end,
    __unm = function(a) return ImVec2(-a.x,-a.y) end,
    __mul = function(a, b) --scalar mult
        if not ffi.istype(ImVec2, b) then
        return ImVec2(a.x * b, a.y * b) end
        return ImVec2(a * b.x, a * b.y)
    end,
    __tostring = function(v) return 'ImVec2<'..v.x..','..v.y..'>' end
})
local ImVec4= {}
ImVec4.__index = ImVec4
ImVec4 = ffi.metatype("ImVec4",ImVec4)
--the module
local M = {ImVec2 = ImVec2, ImVec4 = ImVec4 ,lib = lib}
----------ImFontConfig
local ImFontConfig = {}
ImFontConfig.__index = ImFontConfig
ImFontConfig.__new = function(tp)
    local ret = ffi.new(tp)
    lib.ImFontConfig_DefaultConstructor(ret)
    return ret
end
M.ImFontConfig = ffi.metatype("ImFontConfig",ImFontConfig)

if jit.os == "Windows" then
    function M.ToUTF(unc_str)
        local buf_len = lib.igImTextCountUtf8BytesFromStr(unc_str, nil) + 1;
        local buf_local = ffi.new("char[?]",buf_len)
        lib.igImTextStrToUtf8(buf_local, buf_len, unc_str, nil);
        return buf_local
    end
    
    function M.FromUTF(utf_str)
        local wbuf_length = lib.igImTextCountCharsFromUtf8(utf_str, nil) + 1;
        local buf_local = ffi.new("ImWchar[?]",wbuf_length)
        lib.igImTextStrFromUtf8(buf_local, wbuf_length, utf_str, nil,nil);
        return buf_local
    end
end

M.FLT_MAX = lib.igGET_FLT_MAX()

-----------ImGui_ImplGlfwGL3
local ImGui_ImplGlfwGL3 = {}
ImGui_ImplGlfwGL3.__index = ImGui_ImplGlfwGL3

local gl3w_inited = false
function ImGui_ImplGlfwGL3.__new()
    if gl3w_inited == false then
        lib.Do_gl3wInit()
        gl3w_inited = true
    end
    local ptr = lib.ImGui_ImplGlfwGL3_new()
    ffi.gc(ptr,lib.ImGui_ImplGlfwGL3_delete)
    return ptr
end

function ImGui_ImplGlfwGL3:destroy()
    ffi.gc(self,nil) --prevent gc twice
    lib.ImGui_ImplGlfwGL3_delete(self)
end

function ImGui_ImplGlfwGL3:NewFrame()
    return lib.ImGui_ImplGlfwGL3_NewFrame(self)
end

function ImGui_ImplGlfwGL3:Render()
    return lib.ImGui_ImplGlfwGL3_Render(self)
end

function ImGui_ImplGlfwGL3:Init(window, install_callbacks)
    return lib.ImGui_ImplGlfwGL3_Init(self, window,install_callbacks);
end

function ImGui_ImplGlfwGL3.KeyCallback(window, key,scancode, action, mods)
    return lib.ImGui_ImplGlfwGL3_KeyCallback(window, key,scancode, action, mods);
end

function ImGui_ImplGlfwGL3.MouseButtonCallback(win, button, action, mods)
    return lib.ImGui_ImplGlfwGL3_MouseButtonCallback(win, button, action, mods)
end

function ImGui_ImplGlfwGL3.ScrollCallback(window,xoffset,yoffset)
    return lib.ImGui_ImplGlfwGL3_MouseButtonCallback(window,xoffset,yoffset)
end

function ImGui_ImplGlfwGL3.CharCallback(window,c)
    return lib.ImGui_ImplGlfwGL3_CharCallback(window, c);
end

M.ImplGlfwGL3 = ffi.metatype("ImGui_ImplGlfwGL3",ImGui_ImplGlfwGL3)

-----------------------Imgui_Impl_glfw_opengl3
local Imgui_Impl_glfw_opengl3 = {}
Imgui_Impl_glfw_opengl3.__index = Imgui_Impl_glfw_opengl3

function Imgui_Impl_glfw_opengl3.__call()
    if gl3w_inited == false then
        lib.Do_gl3wInit()
        gl3w_inited = true
    end
    return setmetatable({ctx = lib.igCreateContext(nil)},Imgui_Impl_glfw_opengl3)
end

function Imgui_Impl_glfw_opengl3:Init(window, install_callbacks)
    lib.ImGui_ImplGlfw_InitForOpenGL(window, install_callbacks);
    lib.ImGui_ImplOpenGL3_Init("#version 150");
end

function Imgui_Impl_glfw_opengl3:destroy()
    lib.ImGui_ImplOpenGL3_Shutdown();
    lib.ImGui_ImplGlfw_Shutdown();
    lib.igDestroyContext(self.ctx);
end

function Imgui_Impl_glfw_opengl3:NewFrame()
    lib.ImGui_ImplOpenGL3_NewFrame();
    lib.ImGui_ImplGlfw_NewFrame();
    lib.igNewFrame();
end

function Imgui_Impl_glfw_opengl3:Render()
    lib.igRender()
    lib.ImGui_ImplOpenGL3_RenderDrawData(lib.igGetDrawData());
end

function Imgui_Impl_glfw_opengl3.KeyCallback(window, key,scancode, action, mods)
    return lib.ImGui_ImplGlfw_KeyCallback(window, key,scancode, action, mods);
end

function Imgui_Impl_glfw_opengl3.MouseButtonCallback(win, button, action, mods)
    return lib.ImGui_ImplGlfw_MouseButtonCallback(win, button, action, mods)
end

function Imgui_Impl_glfw_opengl3.ScrollCallback(window,xoffset,yoffset)
    return lib.ImGui_ImplGlfw_ScrollCallback(window,xoffset,yoffset)
end

function Imgui_Impl_glfw_opengl3.CharCallback(window,c)
    return lib.ImGui_ImplGlfw_CharCallback(window, c);
end

M.Imgui_Impl_glfw_opengl3 = setmetatable({},Imgui_Impl_glfw_opengl3)

-----------------------Imgui_Impl_glfw_opengl2
local Imgui_Impl_glfw_opengl2 = {}
Imgui_Impl_glfw_opengl2.__index = Imgui_Impl_glfw_opengl2

function Imgui_Impl_glfw_opengl2.__call()
    return setmetatable({ctx = lib.igCreateContext(nil)},Imgui_Impl_glfw_opengl2)
end

function Imgui_Impl_glfw_opengl2:Init(window, install_callbacks)
    lib.ImGui_ImplGlfw_InitForOpenGL(window, install_callbacks);
    lib.ImGui_ImplOpenGL2_Init();
end

function Imgui_Impl_glfw_opengl2:destroy()
    lib.ImGui_ImplOpenGL2_Shutdown();
    lib.ImGui_ImplGlfw_Shutdown();
    lib.igDestroyContext(self.ctx);
end

function Imgui_Impl_glfw_opengl2:NewFrame()
    lib.ImGui_ImplOpenGL2_NewFrame();
    lib.ImGui_ImplGlfw_NewFrame();
    lib.igNewFrame();
end

function Imgui_Impl_glfw_opengl2:Render()
    lib.igRender()
    lib.ImGui_ImplOpenGL2_RenderDrawData(lib.igGetDrawData());
end

function Imgui_Impl_glfw_opengl2.KeyCallback(window, key,scancode, action, mods)
    return lib.ImGui_ImplGlfw_KeyCallback(window, key,scancode, action, mods);
end

function Imgui_Impl_glfw_opengl2.MouseButtonCallback(win, button, action, mods)
    return lib.ImGui_ImplGlfw_MouseButtonCallback(win, button, action, mods)
end

function Imgui_Impl_glfw_opengl2.ScrollCallback(window,xoffset,yoffset)
    return lib.ImGui_ImplGlfw_ScrollCallback(window,xoffset,yoffset)
end

function Imgui_Impl_glfw_opengl2.CharCallback(window,c)
    return lib.ImGui_ImplGlfw_CharCallback(window, c);
end

M.Imgui_Impl_glfw_opengl2 = setmetatable({},Imgui_Impl_glfw_opengl2)
-----------------------another Log
local Log = {}
Log.__index = Log
function Log.__new()
    local ptr = lib.Log_new()
    ffi.gc(ptr,lib.Log_delete)
    return ptr
end
function Log:Add(fmt,...)
    lib.Log_Add(self,fmt,...)
end
function Log:Draw(title)
    title = title or "Log"
    lib.Log_Draw(self,title)
end
M.Log = ffi.metatype("Log",Log)
------------convenience function
function M.U32(a,b,c,d) return lib.igGetColorU32Vec4(ImVec4(a,b,c,d or 1)) end
----------BEGIN_AUTOGENERATED_LUA---------------------------
--------------------------ImDrawList----------------------------
local ImDrawList= {}
ImDrawList.__index = ImDrawList
function ImDrawList:AddBezierCurve(pos0,cp0,cp1,pos1,col,thickness,num_segments)
    num_segments = num_segments or 0
    return lib.ImDrawList_AddBezierCurve(self,pos0,cp0,cp1,pos1,col,thickness,num_segments)
end
function ImDrawList:AddCallback(callback,callback_data)
    return lib.ImDrawList_AddCallback(self,callback,callback_data)
end
function ImDrawList:AddCircle(centre,radius,col,num_segments,thickness)
    num_segments = num_segments or 12
    thickness = thickness or 1.0
    return lib.ImDrawList_AddCircle(self,centre,radius,col,num_segments,thickness)
end
function ImDrawList:AddCircleFilled(centre,radius,col,num_segments)
    num_segments = num_segments or 12
    return lib.ImDrawList_AddCircleFilled(self,centre,radius,col,num_segments)
end
function ImDrawList:AddConvexPolyFilled(points,num_points,col)
    return lib.ImDrawList_AddConvexPolyFilled(self,points,num_points,col)
end
function ImDrawList:AddDrawCmd()
    return lib.ImDrawList_AddDrawCmd(self)
end
function ImDrawList:AddImage(user_texture_id,a,b,uv_a,uv_b,col)
    uv_b = uv_b or ImVec2(1,1)
    uv_a = uv_a or ImVec2(0,0)
    col = col or 0xFFFFFFFF
    return lib.ImDrawList_AddImage(self,user_texture_id,a,b,uv_a,uv_b,col)
end
function ImDrawList:AddImageQuad(user_texture_id,a,b,c,d,uv_a,uv_b,uv_c,uv_d,col)
    uv_c = uv_c or ImVec2(1,1)
    uv_a = uv_a or ImVec2(0,0)
    col = col or 0xFFFFFFFF
    uv_b = uv_b or ImVec2(1,0)
    uv_d = uv_d or ImVec2(0,1)
    return lib.ImDrawList_AddImageQuad(self,user_texture_id,a,b,c,d,uv_a,uv_b,uv_c,uv_d,col)
end
function ImDrawList:AddImageRounded(user_texture_id,a,b,uv_a,uv_b,col,rounding,rounding_corners)
    rounding_corners = rounding_corners or lib.ImDrawCornerFlags_All
    return lib.ImDrawList_AddImageRounded(self,user_texture_id,a,b,uv_a,uv_b,col,rounding,rounding_corners)
end
function ImDrawList:AddLine(a,b,col,thickness)
    thickness = thickness or 1.0
    return lib.ImDrawList_AddLine(self,a,b,col,thickness)
end
function ImDrawList:AddPolyline(points,num_points,col,closed,thickness)
    return lib.ImDrawList_AddPolyline(self,points,num_points,col,closed,thickness)
end
function ImDrawList:AddQuad(a,b,c,d,col,thickness)
    thickness = thickness or 1.0
    return lib.ImDrawList_AddQuad(self,a,b,c,d,col,thickness)
end
function ImDrawList:AddQuadFilled(a,b,c,d,col)
    return lib.ImDrawList_AddQuadFilled(self,a,b,c,d,col)
end
function ImDrawList:AddRect(a,b,col,rounding,rounding_corners_flags,thickness)
    rounding = rounding or 0.0
    rounding_corners_flags = rounding_corners_flags or lib.ImDrawCornerFlags_All
    thickness = thickness or 1.0
    return lib.ImDrawList_AddRect(self,a,b,col,rounding,rounding_corners_flags,thickness)
end
function ImDrawList:AddRectFilled(a,b,col,rounding,rounding_corners_flags)
    rounding = rounding or 0.0
    rounding_corners_flags = rounding_corners_flags or lib.ImDrawCornerFlags_All
    return lib.ImDrawList_AddRectFilled(self,a,b,col,rounding,rounding_corners_flags)
end
function ImDrawList:AddRectFilledMultiColor(a,b,col_upr_left,col_upr_right,col_bot_right,col_bot_left)
    return lib.ImDrawList_AddRectFilledMultiColor(self,a,b,col_upr_left,col_upr_right,col_bot_right,col_bot_left)
end
function ImDrawList:AddText(pos,col,text_begin,text_end)
    text_end = text_end or nil
    return lib.ImDrawList_AddText(self,pos,col,text_begin,text_end)
end
function ImDrawList:AddTextFontPtr(font,font_size,pos,col,text_begin,text_end,wrap_width,cpu_fine_clip_rect)
    text_end = text_end or nil
    cpu_fine_clip_rect = cpu_fine_clip_rect or nil
    wrap_width = wrap_width or 0.0
    return lib.ImDrawList_AddTextFontPtr(self,font,font_size,pos,col,text_begin,text_end,wrap_width,cpu_fine_clip_rect)
end
function ImDrawList:AddTriangle(a,b,c,col,thickness)
    thickness = thickness or 1.0
    return lib.ImDrawList_AddTriangle(self,a,b,c,col,thickness)
end
function ImDrawList:AddTriangleFilled(a,b,c,col)
    return lib.ImDrawList_AddTriangleFilled(self,a,b,c,col)
end
function ImDrawList:ChannelsMerge()
    return lib.ImDrawList_ChannelsMerge(self)
end
function ImDrawList:ChannelsSetCurrent(channel_index)
    return lib.ImDrawList_ChannelsSetCurrent(self,channel_index)
end
function ImDrawList:ChannelsSplit(channels_count)
    return lib.ImDrawList_ChannelsSplit(self,channels_count)
end
function ImDrawList:Clear()
    return lib.ImDrawList_Clear(self)
end
function ImDrawList:ClearFreeMemory()
    return lib.ImDrawList_ClearFreeMemory(self)
end
function ImDrawList:CloneOutput()
    return lib.ImDrawList_CloneOutput(self)
end
function ImDrawList:GetClipRectMax()
    return lib.ImDrawList_GetClipRectMax(self)
end
function ImDrawList:GetClipRectMin()
    return lib.ImDrawList_GetClipRectMin(self)
end
function ImDrawList:PathArcTo(centre,radius,a_min,a_max,num_segments)
    num_segments = num_segments or 10
    return lib.ImDrawList_PathArcTo(self,centre,radius,a_min,a_max,num_segments)
end
function ImDrawList:PathArcToFast(centre,radius,a_min_of_12,a_max_of_12)
    return lib.ImDrawList_PathArcToFast(self,centre,radius,a_min_of_12,a_max_of_12)
end
function ImDrawList:PathBezierCurveTo(p1,p2,p3,num_segments)
    num_segments = num_segments or 0
    return lib.ImDrawList_PathBezierCurveTo(self,p1,p2,p3,num_segments)
end
function ImDrawList:PathClear()
    return lib.ImDrawList_PathClear(self)
end
function ImDrawList:PathFillConvex(col)
    return lib.ImDrawList_PathFillConvex(self,col)
end
function ImDrawList:PathLineTo(pos)
    return lib.ImDrawList_PathLineTo(self,pos)
end
function ImDrawList:PathLineToMergeDuplicate(pos)
    return lib.ImDrawList_PathLineToMergeDuplicate(self,pos)
end
function ImDrawList:PathRect(rect_min,rect_max,rounding,rounding_corners_flags)
    rounding = rounding or 0.0
    rounding_corners_flags = rounding_corners_flags or lib.ImDrawCornerFlags_All
    return lib.ImDrawList_PathRect(self,rect_min,rect_max,rounding,rounding_corners_flags)
end
function ImDrawList:PathStroke(col,closed,thickness)
    thickness = thickness or 1.0
    return lib.ImDrawList_PathStroke(self,col,closed,thickness)
end
function ImDrawList:PopClipRect()
    return lib.ImDrawList_PopClipRect(self)
end
function ImDrawList:PopTextureID()
    return lib.ImDrawList_PopTextureID(self)
end
function ImDrawList:PrimQuadUV(a,b,c,d,uv_a,uv_b,uv_c,uv_d,col)
    return lib.ImDrawList_PrimQuadUV(self,a,b,c,d,uv_a,uv_b,uv_c,uv_d,col)
end
function ImDrawList:PrimRect(a,b,col)
    return lib.ImDrawList_PrimRect(self,a,b,col)
end
function ImDrawList:PrimRectUV(a,b,uv_a,uv_b,col)
    return lib.ImDrawList_PrimRectUV(self,a,b,uv_a,uv_b,col)
end
function ImDrawList:PrimReserve(idx_count,vtx_count)
    return lib.ImDrawList_PrimReserve(self,idx_count,vtx_count)
end
function ImDrawList:PrimVtx(pos,uv,col)
    return lib.ImDrawList_PrimVtx(self,pos,uv,col)
end
function ImDrawList:PrimWriteIdx(idx)
    return lib.ImDrawList_PrimWriteIdx(self,idx)
end
function ImDrawList:PrimWriteVtx(pos,uv,col)
    return lib.ImDrawList_PrimWriteVtx(self,pos,uv,col)
end
function ImDrawList:PushClipRect(clip_rect_min,clip_rect_max,intersect_with_current_clip_rect)
    intersect_with_current_clip_rect = intersect_with_current_clip_rect or false
    return lib.ImDrawList_PushClipRect(self,clip_rect_min,clip_rect_max,intersect_with_current_clip_rect)
end
function ImDrawList:PushClipRectFullScreen()
    return lib.ImDrawList_PushClipRectFullScreen(self)
end
function ImDrawList:PushTextureID(texture_id)
    return lib.ImDrawList_PushTextureID(self,texture_id)
end
function ImDrawList:UpdateClipRect()
    return lib.ImDrawList_UpdateClipRect(self)
end
function ImDrawList:UpdateTextureID()
    return lib.ImDrawList_UpdateTextureID(self)
end
M.ImDrawList = ffi.metatype("ImDrawList",ImDrawList)
--------------------------TextRange----------------------------
local TextRange= {}
TextRange.__index = TextRange
function TextRange:begin()
    return lib.TextRange_begin(self)
end
function TextRange:empty()
    return lib.TextRange_empty(self)
end
function TextRange:_end()
    return lib.TextRange_end(self)
end
function TextRange:front()
    return lib.TextRange_front(self)
end
function TextRange:is_blank(c)
    return lib.TextRange_is_blank(self,c)
end
function TextRange:split(separator,out)
    return lib.TextRange_split(self,separator,out)
end
function TextRange:trim_blanks()
    return lib.TextRange_trim_blanks(self)
end
M.TextRange = ffi.metatype("TextRange",TextRange)
--------------------------CustomRect----------------------------
local CustomRect= {}
CustomRect.__index = CustomRect
function CustomRect:IsPacked()
    return lib.CustomRect_IsPacked(self)
end
M.CustomRect = ffi.metatype("CustomRect",CustomRect)
--------------------------ImGuiStorage----------------------------
local ImGuiStorage= {}
ImGuiStorage.__index = ImGuiStorage
function ImGuiStorage:BuildSortByKey()
    return lib.ImGuiStorage_BuildSortByKey(self)
end
function ImGuiStorage:Clear()
    return lib.ImGuiStorage_Clear(self)
end
function ImGuiStorage:GetBool(key,default_val)
    default_val = default_val or false
    return lib.ImGuiStorage_GetBool(self,key,default_val)
end
function ImGuiStorage:GetBoolRef(key,default_val)
    default_val = default_val or false
    return lib.ImGuiStorage_GetBoolRef(self,key,default_val)
end
function ImGuiStorage:GetFloat(key,default_val)
    default_val = default_val or 0.0
    return lib.ImGuiStorage_GetFloat(self,key,default_val)
end
function ImGuiStorage:GetFloatRef(key,default_val)
    default_val = default_val or 0.0
    return lib.ImGuiStorage_GetFloatRef(self,key,default_val)
end
function ImGuiStorage:GetInt(key,default_val)
    default_val = default_val or 0
    return lib.ImGuiStorage_GetInt(self,key,default_val)
end
function ImGuiStorage:GetIntRef(key,default_val)
    default_val = default_val or 0
    return lib.ImGuiStorage_GetIntRef(self,key,default_val)
end
function ImGuiStorage:GetVoidPtr(key)
    return lib.ImGuiStorage_GetVoidPtr(self,key)
end
function ImGuiStorage:GetVoidPtrRef(key,default_val)
    default_val = default_val or nil
    return lib.ImGuiStorage_GetVoidPtrRef(self,key,default_val)
end
function ImGuiStorage:SetAllInt(val)
    return lib.ImGuiStorage_SetAllInt(self,val)
end
function ImGuiStorage:SetBool(key,val)
    return lib.ImGuiStorage_SetBool(self,key,val)
end
function ImGuiStorage:SetFloat(key,val)
    return lib.ImGuiStorage_SetFloat(self,key,val)
end
function ImGuiStorage:SetInt(key,val)
    return lib.ImGuiStorage_SetInt(self,key,val)
end
function ImGuiStorage:SetVoidPtr(key,val)
    return lib.ImGuiStorage_SetVoidPtr(self,key,val)
end
M.ImGuiStorage = ffi.metatype("ImGuiStorage",ImGuiStorage)
--------------------------ImDrawCmd----------------------------
local ImDrawCmd= {}
ImDrawCmd.__index = ImDrawCmd
M.ImDrawCmd = ffi.metatype("ImDrawCmd",ImDrawCmd)
--------------------------ImGuiOnceUponAFrame----------------------------
local ImGuiOnceUponAFrame= {}
ImGuiOnceUponAFrame.__index = ImGuiOnceUponAFrame
M.ImGuiOnceUponAFrame = ffi.metatype("ImGuiOnceUponAFrame",ImGuiOnceUponAFrame)
--------------------------Pair----------------------------
local Pair= {}
Pair.__index = Pair
M.Pair = ffi.metatype("Pair",Pair)
--------------------------ImGuiTextBuffer----------------------------
local ImGuiTextBuffer= {}
ImGuiTextBuffer.__index = ImGuiTextBuffer
function ImGuiTextBuffer:appendf(fmt,...)
    return lib.ImGuiTextBuffer_appendf(self,fmt,...)
end
function ImGuiTextBuffer:appendfv(fmt,args)
    return lib.ImGuiTextBuffer_appendfv(self,fmt,args)
end
function ImGuiTextBuffer:begin()
    return lib.ImGuiTextBuffer_begin(self)
end
function ImGuiTextBuffer:c_str()
    return lib.ImGuiTextBuffer_c_str(self)
end
function ImGuiTextBuffer:clear()
    return lib.ImGuiTextBuffer_clear(self)
end
function ImGuiTextBuffer:empty()
    return lib.ImGuiTextBuffer_empty(self)
end
function ImGuiTextBuffer:_end()
    return lib.ImGuiTextBuffer_end(self)
end
function ImGuiTextBuffer:reserve(capacity)
    return lib.ImGuiTextBuffer_reserve(self,capacity)
end
function ImGuiTextBuffer:size()
    return lib.ImGuiTextBuffer_size(self)
end
M.ImGuiTextBuffer = ffi.metatype("ImGuiTextBuffer",ImGuiTextBuffer)
--------------------------ImGuiStyle----------------------------
local ImGuiStyle= {}
ImGuiStyle.__index = ImGuiStyle
function ImGuiStyle:ScaleAllSizes(scale_factor)
    return lib.ImGuiStyle_ScaleAllSizes(self,scale_factor)
end
M.ImGuiStyle = ffi.metatype("ImGuiStyle",ImGuiStyle)
--------------------------ImGuiIO----------------------------
local ImGuiIO= {}
ImGuiIO.__index = ImGuiIO
function ImGuiIO:AddInputCharacter(c)
    return lib.ImGuiIO_AddInputCharacter(self,c)
end
function ImGuiIO:AddInputCharactersUTF8(utf8_chars)
    return lib.ImGuiIO_AddInputCharactersUTF8(self,utf8_chars)
end
function ImGuiIO:ClearInputCharacters()
    return lib.ImGuiIO_ClearInputCharacters(self)
end
M.ImGuiIO = ffi.metatype("ImGuiIO",ImGuiIO)
--------------------------ImGuiListClipper----------------------------
local ImGuiListClipper= {}
ImGuiListClipper.__index = ImGuiListClipper
function ImGuiListClipper:Begin(items_count,items_height)
    items_height = items_height or -1.0
    return lib.ImGuiListClipper_Begin(self,items_count,items_height)
end
function ImGuiListClipper:End()
    return lib.ImGuiListClipper_End(self)
end
function ImGuiListClipper:Step()
    return lib.ImGuiListClipper_Step(self)
end
M.ImGuiListClipper = ffi.metatype("ImGuiListClipper",ImGuiListClipper)
--------------------------ImFont----------------------------
local ImFont= {}
ImFont.__index = ImFont
function ImFont:AddGlyph(c,x0,y0,x1,y1,u0,v0,u1,v1,advance_x)
    return lib.ImFont_AddGlyph(self,c,x0,y0,x1,y1,u0,v0,u1,v1,advance_x)
end
function ImFont:AddRemapChar(dst,src,overwrite_dst)
    overwrite_dst = overwrite_dst or true
    return lib.ImFont_AddRemapChar(self,dst,src,overwrite_dst)
end
function ImFont:BuildLookupTable()
    return lib.ImFont_BuildLookupTable(self)
end
function ImFont:CalcTextSizeA(size,max_width,wrap_width,text_begin,text_end,remaining)
    text_end = text_end or nil
    remaining = remaining or nil
    return lib.ImFont_CalcTextSizeA(self,size,max_width,wrap_width,text_begin,text_end,remaining)
end
function ImFont:CalcWordWrapPositionA(scale,text,text_end,wrap_width)
    return lib.ImFont_CalcWordWrapPositionA(self,scale,text,text_end,wrap_width)
end
function ImFont:ClearOutputData()
    return lib.ImFont_ClearOutputData(self)
end
function ImFont:FindGlyph(c)
    return lib.ImFont_FindGlyph(self,c)
end
function ImFont:FindGlyphNoFallback(c)
    return lib.ImFont_FindGlyphNoFallback(self,c)
end
function ImFont:GetCharAdvance(c)
    return lib.ImFont_GetCharAdvance(self,c)
end
function ImFont:GetDebugName()
    return lib.ImFont_GetDebugName(self)
end
function ImFont:GrowIndex(new_size)
    return lib.ImFont_GrowIndex(self,new_size)
end
function ImFont:IsLoaded()
    return lib.ImFont_IsLoaded(self)
end
function ImFont:RenderChar(draw_list,size,pos,col,c)
    return lib.ImFont_RenderChar(self,draw_list,size,pos,col,c)
end
function ImFont:RenderText(draw_list,size,pos,col,clip_rect,text_begin,text_end,wrap_width,cpu_fine_clip)
    wrap_width = wrap_width or 0.0
    cpu_fine_clip = cpu_fine_clip or false
    return lib.ImFont_RenderText(self,draw_list,size,pos,col,clip_rect,text_begin,text_end,wrap_width,cpu_fine_clip)
end
function ImFont:SetFallbackChar(c)
    return lib.ImFont_SetFallbackChar(self,c)
end
M.ImFont = ffi.metatype("ImFont",ImFont)
--------------------------ImDrawData----------------------------
local ImDrawData= {}
ImDrawData.__index = ImDrawData
function ImDrawData:Clear()
    return lib.ImDrawData_Clear(self)
end
function ImDrawData:DeIndexAllBuffers()
    return lib.ImDrawData_DeIndexAllBuffers(self)
end
function ImDrawData:ScaleClipRects(sc)
    return lib.ImDrawData_ScaleClipRects(self,sc)
end
M.ImDrawData = ffi.metatype("ImDrawData",ImDrawData)
--------------------------ImFontAtlas----------------------------
local ImFontAtlas= {}
ImFontAtlas.__index = ImFontAtlas
function ImFontAtlas:AddCustomRectFontGlyph(font,id,width,height,advance_x,offset)
    offset = offset or ImVec2(0,0)
    return lib.ImFontAtlas_AddCustomRectFontGlyph(self,font,id,width,height,advance_x,offset)
end
function ImFontAtlas:AddCustomRectRegular(id,width,height)
    return lib.ImFontAtlas_AddCustomRectRegular(self,id,width,height)
end
function ImFontAtlas:AddFont(font_cfg)
    return lib.ImFontAtlas_AddFont(self,font_cfg)
end
function ImFontAtlas:AddFontDefault(font_cfg)
    font_cfg = font_cfg or nil
    return lib.ImFontAtlas_AddFontDefault(self,font_cfg)
end
function ImFontAtlas:AddFontFromFileTTF(filename,size_pixels,font_cfg,glyph_ranges)
    font_cfg = font_cfg or nil
    glyph_ranges = glyph_ranges or nil
    return lib.ImFontAtlas_AddFontFromFileTTF(self,filename,size_pixels,font_cfg,glyph_ranges)
end
function ImFontAtlas:AddFontFromMemoryCompressedBase85TTF(compressed_font_data_base85,size_pixels,font_cfg,glyph_ranges)
    font_cfg = font_cfg or nil
    glyph_ranges = glyph_ranges or nil
    return lib.ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(self,compressed_font_data_base85,size_pixels,font_cfg,glyph_ranges)
end
function ImFontAtlas:AddFontFromMemoryCompressedTTF(compressed_font_data,compressed_font_size,size_pixels,font_cfg,glyph_ranges)
    font_cfg = font_cfg or nil
    glyph_ranges = glyph_ranges or nil
    return lib.ImFontAtlas_AddFontFromMemoryCompressedTTF(self,compressed_font_data,compressed_font_size,size_pixels,font_cfg,glyph_ranges)
end
function ImFontAtlas:AddFontFromMemoryTTF(font_data,font_size,size_pixels,font_cfg,glyph_ranges)
    font_cfg = font_cfg or nil
    glyph_ranges = glyph_ranges or nil
    return lib.ImFontAtlas_AddFontFromMemoryTTF(self,font_data,font_size,size_pixels,font_cfg,glyph_ranges)
end
function ImFontAtlas:Build()
    return lib.ImFontAtlas_Build(self)
end
function ImFontAtlas:CalcCustomRectUV(rect,out_uv_min,out_uv_max)
    return lib.ImFontAtlas_CalcCustomRectUV(self,rect,out_uv_min,out_uv_max)
end
function ImFontAtlas:Clear()
    return lib.ImFontAtlas_Clear(self)
end
function ImFontAtlas:ClearFonts()
    return lib.ImFontAtlas_ClearFonts(self)
end
function ImFontAtlas:ClearInputData()
    return lib.ImFontAtlas_ClearInputData(self)
end
function ImFontAtlas:ClearTexData()
    return lib.ImFontAtlas_ClearTexData(self)
end
function ImFontAtlas:GetCustomRectByIndex(index)
    return lib.ImFontAtlas_GetCustomRectByIndex(self,index)
end
function ImFontAtlas:GetGlyphRangesChineseFull()
    return lib.ImFontAtlas_GetGlyphRangesChineseFull(self)
end
function ImFontAtlas:GetGlyphRangesChineseSimplifiedCommon()
    return lib.ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(self)
end
function ImFontAtlas:GetGlyphRangesCyrillic()
    return lib.ImFontAtlas_GetGlyphRangesCyrillic(self)
end
function ImFontAtlas:GetGlyphRangesDefault()
    return lib.ImFontAtlas_GetGlyphRangesDefault(self)
end
function ImFontAtlas:GetGlyphRangesJapanese()
    return lib.ImFontAtlas_GetGlyphRangesJapanese(self)
end
function ImFontAtlas:GetGlyphRangesKorean()
    return lib.ImFontAtlas_GetGlyphRangesKorean(self)
end
function ImFontAtlas:GetGlyphRangesThai()
    return lib.ImFontAtlas_GetGlyphRangesThai(self)
end
function ImFontAtlas:GetMouseCursorTexData(cursor,out_offset,out_size,out_uv_border,out_uv_fill)
    return lib.ImFontAtlas_GetMouseCursorTexData(self,cursor,out_offset,out_size,out_uv_border,out_uv_fill)
end
function ImFontAtlas:GetTexDataAsAlpha8(out_pixels,out_width,out_height,out_bytes_per_pixel)
    out_bytes_per_pixel = out_bytes_per_pixel or nil
    return lib.ImFontAtlas_GetTexDataAsAlpha8(self,out_pixels,out_width,out_height,out_bytes_per_pixel)
end
function ImFontAtlas:GetTexDataAsRGBA32(out_pixels,out_width,out_height,out_bytes_per_pixel)
    out_bytes_per_pixel = out_bytes_per_pixel or nil
    return lib.ImFontAtlas_GetTexDataAsRGBA32(self,out_pixels,out_width,out_height,out_bytes_per_pixel)
end
function ImFontAtlas:IsBuilt()
    return lib.ImFontAtlas_IsBuilt(self)
end
function ImFontAtlas:SetTexID(id)
    return lib.ImFontAtlas_SetTexID(self,id)
end
M.ImFontAtlas = ffi.metatype("ImFontAtlas",ImFontAtlas)
--------------------------ImGuiTextEditCallbackData----------------------------
local ImGuiTextEditCallbackData= {}
ImGuiTextEditCallbackData.__index = ImGuiTextEditCallbackData
function ImGuiTextEditCallbackData:DeleteChars(pos,bytes_count)
    return lib.ImGuiTextEditCallbackData_DeleteChars(self,pos,bytes_count)
end
function ImGuiTextEditCallbackData:HasSelection()
    return lib.ImGuiTextEditCallbackData_HasSelection(self)
end
function ImGuiTextEditCallbackData:InsertChars(pos,text,text_end)
    text_end = text_end or nil
    return lib.ImGuiTextEditCallbackData_InsertChars(self,pos,text,text_end)
end
M.ImGuiTextEditCallbackData = ffi.metatype("ImGuiTextEditCallbackData",ImGuiTextEditCallbackData)
--------------------------ImGuiPayload----------------------------
local ImGuiPayload= {}
ImGuiPayload.__index = ImGuiPayload
function ImGuiPayload:Clear()
    return lib.ImGuiPayload_Clear(self)
end
function ImGuiPayload:IsDataType(type)
    return lib.ImGuiPayload_IsDataType(self,type)
end
function ImGuiPayload:IsDelivery()
    return lib.ImGuiPayload_IsDelivery(self)
end
function ImGuiPayload:IsPreview()
    return lib.ImGuiPayload_IsPreview(self)
end
M.ImGuiPayload = ffi.metatype("ImGuiPayload",ImGuiPayload)
--------------------------ImColor----------------------------
local ImColor= {}
ImColor.__index = ImColor
function ImColor:HSV(h,s,v,a)
    a = a or 1.0
    return lib.ImColor_HSV(self,h,s,v,a)
end
function ImColor:SetHSV(h,s,v,a)
    a = a or 1.0
    return lib.ImColor_SetHSV(self,h,s,v,a)
end
M.ImColor = ffi.metatype("ImColor",ImColor)
--------------------------ImGuiTextFilter----------------------------
local ImGuiTextFilter= {}
ImGuiTextFilter.__index = ImGuiTextFilter
function ImGuiTextFilter:Build()
    return lib.ImGuiTextFilter_Build(self)
end
function ImGuiTextFilter:Clear()
    return lib.ImGuiTextFilter_Clear(self)
end
function ImGuiTextFilter:Draw(label,width)
    label = label or "Filter(inc,-exc)"
    width = width or 0.0
    return lib.ImGuiTextFilter_Draw(self,label,width)
end
function ImGuiTextFilter:IsActive()
    return lib.ImGuiTextFilter_IsActive(self)
end
function ImGuiTextFilter:PassFilter(text,text_end)
    text_end = text_end or nil
    return lib.ImGuiTextFilter_PassFilter(self,text,text_end)
end
M.ImGuiTextFilter = ffi.metatype("ImGuiTextFilter",ImGuiTextFilter)
--------------------------GlyphRangesBuilder----------------------------
local GlyphRangesBuilder= {}
GlyphRangesBuilder.__index = GlyphRangesBuilder
function GlyphRangesBuilder:AddChar(c)
    return lib.GlyphRangesBuilder_AddChar(self,c)
end
function GlyphRangesBuilder:AddRanges(ranges)
    return lib.GlyphRangesBuilder_AddRanges(self,ranges)
end
function GlyphRangesBuilder:AddText(text,text_end)
    text_end = text_end or nil
    return lib.GlyphRangesBuilder_AddText(self,text,text_end)
end
function GlyphRangesBuilder:BuildRanges(out_ranges)
    return lib.GlyphRangesBuilder_BuildRanges(self,out_ranges)
end
function GlyphRangesBuilder:GetBit(n)
    return lib.GlyphRangesBuilder_GetBit(self,n)
end
function GlyphRangesBuilder:SetBit(n)
    return lib.GlyphRangesBuilder_SetBit(self,n)
end
M.GlyphRangesBuilder = ffi.metatype("GlyphRangesBuilder",GlyphRangesBuilder)
--------------------------ImGui----------------------------
function M.AcceptDragDropPayload(type,flags)
    flags = flags or 0
    return lib.igAcceptDragDropPayload(type,flags)
end
function M.AlignTextToFramePadding()
    return lib.igAlignTextToFramePadding()
end
function M.ArrowButton(str_id,dir)
    return lib.igArrowButton(str_id,dir)
end
function M.Begin(name,p_open,flags)
    p_open = p_open or nil
    flags = flags or 0
    return lib.igBegin(name,p_open,flags)
end
function M.BeginChild(str_id,size,border,flags)
    border = border or false
    size = size or ImVec2(0,0)
    flags = flags or 0
    return lib.igBeginChild(str_id,size,border,flags)
end
function M.BeginChildID(id,size,border,flags)
    border = border or false
    size = size or ImVec2(0,0)
    flags = flags or 0
    return lib.igBeginChildID(id,size,border,flags)
end
function M.BeginChildFrame(id,size,flags)
    flags = flags or 0
    return lib.igBeginChildFrame(id,size,flags)
end
function M.BeginCombo(label,preview_value,flags)
    flags = flags or 0
    return lib.igBeginCombo(label,preview_value,flags)
end
function M.BeginDragDropSource(flags)
    flags = flags or 0
    return lib.igBeginDragDropSource(flags)
end
function M.BeginDragDropTarget()
    return lib.igBeginDragDropTarget()
end
function M.BeginGroup()
    return lib.igBeginGroup()
end
function M.BeginMainMenuBar()
    return lib.igBeginMainMenuBar()
end
function M.BeginMenu(label,enabled)
    enabled = enabled or true
    return lib.igBeginMenu(label,enabled)
end
function M.BeginMenuBar()
    return lib.igBeginMenuBar()
end
function M.BeginPopup(str_id,flags)
    flags = flags or 0
    return lib.igBeginPopup(str_id,flags)
end
function M.BeginPopupContextItem(str_id,mouse_button)
    mouse_button = mouse_button or 1
    str_id = str_id or nil
    return lib.igBeginPopupContextItem(str_id,mouse_button)
end
function M.BeginPopupContextVoid(str_id,mouse_button)
    mouse_button = mouse_button or 1
    str_id = str_id or nil
    return lib.igBeginPopupContextVoid(str_id,mouse_button)
end
function M.BeginPopupContextWindow(str_id,mouse_button,also_over_items)
    str_id = str_id or nil
    mouse_button = mouse_button or 1
    also_over_items = also_over_items or true
    return lib.igBeginPopupContextWindow(str_id,mouse_button,also_over_items)
end
function M.BeginPopupModal(name,p_open,flags)
    p_open = p_open or nil
    flags = flags or 0
    return lib.igBeginPopupModal(name,p_open,flags)
end
function M.BeginTooltip()
    return lib.igBeginTooltip()
end
function M.Bullet()
    return lib.igBullet()
end
function M.BulletText(fmt,...)
    return lib.igBulletText(fmt,...)
end
function M.BulletTextV(fmt,args)
    return lib.igBulletTextV(fmt,args)
end
function M.Button(label,size)
    size = size or ImVec2(0,0)
    return lib.igButton(label,size)
end
function M.CalcItemWidth()
    return lib.igCalcItemWidth()
end
function M.CalcListClipping(items_count,items_height,out_items_display_start,out_items_display_end)
    return lib.igCalcListClipping(items_count,items_height,out_items_display_start,out_items_display_end)
end
function M.CalcTextSize(text,text_end,hide_text_after_double_hash,wrap_width)
    text_end = text_end or nil
    wrap_width = wrap_width or -1.0
    hide_text_after_double_hash = hide_text_after_double_hash or false
    return lib.igCalcTextSize(text,text_end,hide_text_after_double_hash,wrap_width)
end
function M.CaptureKeyboardFromApp(capture)
    capture = capture or true
    return lib.igCaptureKeyboardFromApp(capture)
end
function M.CaptureMouseFromApp(capture)
    capture = capture or true
    return lib.igCaptureMouseFromApp(capture)
end
function M.Checkbox(label,v)
    return lib.igCheckbox(label,v)
end
function M.CheckboxFlags(label,flags,flags_value)
    return lib.igCheckboxFlags(label,flags,flags_value)
end
function M.CloseCurrentPopup()
    return lib.igCloseCurrentPopup()
end
function M.CollapsingHeader(label,flags)
    flags = flags or 0
    return lib.igCollapsingHeader(label,flags)
end
function M.CollapsingHeaderBoolPtr(label,p_open,flags)
    flags = flags or 0
    return lib.igCollapsingHeaderBoolPtr(label,p_open,flags)
end
function M.ColorButton(desc_id,col,flags,size)
    size = size or ImVec2(0,0)
    flags = flags or 0
    return lib.igColorButton(desc_id,col,flags,size)
end
function M.ColorConvertFloat4ToU32(_in)
    return lib.igColorConvertFloat4ToU32(_in)
end
function M.ColorConvertHSVtoRGB(h,s,v,out_r,out_g,out_b)
    return lib.igColorConvertHSVtoRGB(h,s,v,out_r,out_g,out_b)
end
function M.ColorConvertRGBtoHSV(r,g,b,out_h,out_s,out_v)
    return lib.igColorConvertRGBtoHSV(r,g,b,out_h,out_s,out_v)
end
function M.ColorConvertU32ToFloat4(_in)
    return lib.igColorConvertU32ToFloat4(_in)
end
function M.ColorEdit3(label,col,flags)
    flags = flags or 0
    return lib.igColorEdit3(label,col,flags)
end
function M.ColorEdit4(label,col,flags)
    flags = flags or 0
    return lib.igColorEdit4(label,col,flags)
end
function M.ColorPicker3(label,col,flags)
    flags = flags or 0
    return lib.igColorPicker3(label,col,flags)
end
function M.ColorPicker4(label,col,flags,ref_col)
    ref_col = ref_col or nil
    flags = flags or 0
    return lib.igColorPicker4(label,col,flags,ref_col)
end
function M.Columns(count,id,border)
    border = border or true
    count = count or 1
    id = id or nil
    return lib.igColumns(count,id,border)
end
function M.Combo(label,current_item,items,items_count,popup_max_height_in_items)
    popup_max_height_in_items = popup_max_height_in_items or -1
    return lib.igCombo(label,current_item,items,items_count,popup_max_height_in_items)
end
function M.ComboStr(label,current_item,items_separated_by_zeros,popup_max_height_in_items)
    popup_max_height_in_items = popup_max_height_in_items or -1
    return lib.igComboStr(label,current_item,items_separated_by_zeros,popup_max_height_in_items)
end
function M.ComboFnPtr(label,current_item,items_getter,data,items_count,popup_max_height_in_items)
    popup_max_height_in_items = popup_max_height_in_items or -1
    return lib.igComboFnPtr(label,current_item,items_getter,data,items_count,popup_max_height_in_items)
end
function M.CreateContext(shared_font_atlas)
    shared_font_atlas = shared_font_atlas or nil
    return lib.igCreateContext(shared_font_atlas)
end
function M.DebugCheckVersionAndDataLayout(version_str,sz_io,sz_style,sz_vec2,sz_vec4,sz_drawvert)
    return lib.igDebugCheckVersionAndDataLayout(version_str,sz_io,sz_style,sz_vec2,sz_vec4,sz_drawvert)
end
function M.DestroyContext(ctx)
    ctx = ctx or nil
    return lib.igDestroyContext(ctx)
end
function M.DragFloat(label,v,v_speed,v_min,v_max,format,power)
    v_speed = v_speed or 1.0
    v_min = v_min or 0.0
    power = power or 1.0
    format = format or "%.3f"
    v_max = v_max or 0.0
    return lib.igDragFloat(label,v,v_speed,v_min,v_max,format,power)
end
function M.DragFloat2(label,v,v_speed,v_min,v_max,format,power)
    v_speed = v_speed or 1.0
    v_min = v_min or 0.0
    power = power or 1.0
    format = format or "%.3f"
    v_max = v_max or 0.0
    return lib.igDragFloat2(label,v,v_speed,v_min,v_max,format,power)
end
function M.DragFloat3(label,v,v_speed,v_min,v_max,format,power)
    v_speed = v_speed or 1.0
    v_min = v_min or 0.0
    power = power or 1.0
    format = format or "%.3f"
    v_max = v_max or 0.0
    return lib.igDragFloat3(label,v,v_speed,v_min,v_max,format,power)
end
function M.DragFloat4(label,v,v_speed,v_min,v_max,format,power)
    v_speed = v_speed or 1.0
    v_min = v_min or 0.0
    power = power or 1.0
    format = format or "%.3f"
    v_max = v_max or 0.0
    return lib.igDragFloat4(label,v,v_speed,v_min,v_max,format,power)
end
function M.DragFloatRange2(label,v_current_min,v_current_max,v_speed,v_min,v_max,format,format_max,power)
    v_speed = v_speed or 1.0
    v_min = v_min or 0.0
    power = power or 1.0
    format = format or "%.3f"
    v_max = v_max or 0.0
    format_max = format_max or nil
    return lib.igDragFloatRange2(label,v_current_min,v_current_max,v_speed,v_min,v_max,format,format_max,power)
end
function M.DragInt(label,v,v_speed,v_min,v_max,format)
    v_speed = v_speed or 1.0
    v_min = v_min or 0
    v_max = v_max or 0
    format = format or "%d"
    return lib.igDragInt(label,v,v_speed,v_min,v_max,format)
end
function M.DragInt2(label,v,v_speed,v_min,v_max,format)
    v_speed = v_speed or 1.0
    v_min = v_min or 0
    v_max = v_max or 0
    format = format or "%d"
    return lib.igDragInt2(label,v,v_speed,v_min,v_max,format)
end
function M.DragInt3(label,v,v_speed,v_min,v_max,format)
    v_speed = v_speed or 1.0
    v_min = v_min or 0
    v_max = v_max or 0
    format = format or "%d"
    return lib.igDragInt3(label,v,v_speed,v_min,v_max,format)
end
function M.DragInt4(label,v,v_speed,v_min,v_max,format)
    v_speed = v_speed or 1.0
    v_min = v_min or 0
    v_max = v_max or 0
    format = format or "%d"
    return lib.igDragInt4(label,v,v_speed,v_min,v_max,format)
end
function M.DragIntRange2(label,v_current_min,v_current_max,v_speed,v_min,v_max,format,format_max)
    v_speed = v_speed or 1.0
    v_min = v_min or 0
    format = format or "%d"
    format_max = format_max or nil
    v_max = v_max or 0
    return lib.igDragIntRange2(label,v_current_min,v_current_max,v_speed,v_min,v_max,format,format_max)
end
function M.DragScalar(label,data_type,v,v_speed,v_min,v_max,format,power)
    v_max = v_max or nil
    v_min = v_min or nil
    format = format or nil
    power = power or 1.0
    return lib.igDragScalar(label,data_type,v,v_speed,v_min,v_max,format,power)
end
function M.DragScalarN(label,data_type,v,components,v_speed,v_min,v_max,format,power)
    v_max = v_max or nil
    v_min = v_min or nil
    format = format or nil
    power = power or 1.0
    return lib.igDragScalarN(label,data_type,v,components,v_speed,v_min,v_max,format,power)
end
function M.Dummy(size)
    return lib.igDummy(size)
end
function M.End()
    return lib.igEnd()
end
function M.EndChild()
    return lib.igEndChild()
end
function M.EndChildFrame()
    return lib.igEndChildFrame()
end
function M.EndCombo()
    return lib.igEndCombo()
end
function M.EndDragDropSource()
    return lib.igEndDragDropSource()
end
function M.EndDragDropTarget()
    return lib.igEndDragDropTarget()
end
function M.EndFrame()
    return lib.igEndFrame()
end
function M.EndGroup()
    return lib.igEndGroup()
end
function M.EndMainMenuBar()
    return lib.igEndMainMenuBar()
end
function M.EndMenu()
    return lib.igEndMenu()
end
function M.EndMenuBar()
    return lib.igEndMenuBar()
end
function M.EndPopup()
    return lib.igEndPopup()
end
function M.EndTooltip()
    return lib.igEndTooltip()
end
function M.GetClipboardText()
    return lib.igGetClipboardText()
end
function M.GetColorU32(idx,alpha_mul)
    alpha_mul = alpha_mul or 1.0
    return lib.igGetColorU32(idx,alpha_mul)
end
function M.GetColorU32Vec4(col)
    return lib.igGetColorU32Vec4(col)
end
function M.GetColorU32U32(col)
    return lib.igGetColorU32U32(col)
end
function M.GetColumnIndex()
    return lib.igGetColumnIndex()
end
function M.GetColumnOffset(column_index)
    column_index = column_index or -1
    return lib.igGetColumnOffset(column_index)
end
function M.GetColumnWidth(column_index)
    column_index = column_index or -1
    return lib.igGetColumnWidth(column_index)
end
function M.GetColumnsCount()
    return lib.igGetColumnsCount()
end
function M.GetContentRegionAvail()
    return lib.igGetContentRegionAvail()
end
function M.GetContentRegionAvailWidth()
    return lib.igGetContentRegionAvailWidth()
end
function M.GetContentRegionMax()
    return lib.igGetContentRegionMax()
end
function M.GetCurrentContext()
    return lib.igGetCurrentContext()
end
function M.GetCursorPos()
    return lib.igGetCursorPos()
end
function M.GetCursorPosX()
    return lib.igGetCursorPosX()
end
function M.GetCursorPosY()
    return lib.igGetCursorPosY()
end
function M.GetCursorScreenPos()
    return lib.igGetCursorScreenPos()
end
function M.GetCursorStartPos()
    return lib.igGetCursorStartPos()
end
function M.GetDrawData()
    return lib.igGetDrawData()
end
function M.GetDrawListSharedData()
    return lib.igGetDrawListSharedData()
end
function M.GetFont()
    return lib.igGetFont()
end
function M.GetFontSize()
    return lib.igGetFontSize()
end
function M.GetFontTexUvWhitePixel()
    return lib.igGetFontTexUvWhitePixel()
end
function M.GetFrameCount()
    return lib.igGetFrameCount()
end
function M.GetFrameHeight()
    return lib.igGetFrameHeight()
end
function M.GetFrameHeightWithSpacing()
    return lib.igGetFrameHeightWithSpacing()
end
function M.GetIDStr(str_id)
    return lib.igGetIDStr(str_id)
end
function M.GetIDStrStr(str_id_begin,str_id_end)
    return lib.igGetIDStrStr(str_id_begin,str_id_end)
end
function M.GetIDPtr(ptr_id)
    return lib.igGetIDPtr(ptr_id)
end
function M.GetIO()
    return lib.igGetIO()
end
function M.GetItemRectMax()
    return lib.igGetItemRectMax()
end
function M.GetItemRectMin()
    return lib.igGetItemRectMin()
end
function M.GetItemRectSize()
    return lib.igGetItemRectSize()
end
function M.GetKeyIndex(imgui_key)
    return lib.igGetKeyIndex(imgui_key)
end
function M.GetKeyPressedAmount(key_index,repeat_delay,rate)
    return lib.igGetKeyPressedAmount(key_index,repeat_delay,rate)
end
function M.GetMouseCursor()
    return lib.igGetMouseCursor()
end
function M.GetMouseDragDelta(button,lock_threshold)
    lock_threshold = lock_threshold or -1.0
    button = button or 0
    return lib.igGetMouseDragDelta(button,lock_threshold)
end
function M.GetMousePos()
    return lib.igGetMousePos()
end
function M.GetMousePosOnOpeningCurrentPopup()
    return lib.igGetMousePosOnOpeningCurrentPopup()
end
function M.GetOverlayDrawList()
    return lib.igGetOverlayDrawList()
end
function M.GetScrollMaxX()
    return lib.igGetScrollMaxX()
end
function M.GetScrollMaxY()
    return lib.igGetScrollMaxY()
end
function M.GetScrollX()
    return lib.igGetScrollX()
end
function M.GetScrollY()
    return lib.igGetScrollY()
end
function M.GetStateStorage()
    return lib.igGetStateStorage()
end
function M.GetStyle()
    return lib.igGetStyle()
end
function M.GetStyleColorName(idx)
    return lib.igGetStyleColorName(idx)
end
function M.GetStyleColorVec4(idx)
    return lib.igGetStyleColorVec4(idx)
end
function M.GetTextLineHeight()
    return lib.igGetTextLineHeight()
end
function M.GetTextLineHeightWithSpacing()
    return lib.igGetTextLineHeightWithSpacing()
end
function M.GetTime()
    return lib.igGetTime()
end
function M.GetTreeNodeToLabelSpacing()
    return lib.igGetTreeNodeToLabelSpacing()
end
function M.GetVersion()
    return lib.igGetVersion()
end
function M.GetWindowContentRegionMax()
    return lib.igGetWindowContentRegionMax()
end
function M.GetWindowContentRegionMin()
    return lib.igGetWindowContentRegionMin()
end
function M.GetWindowContentRegionWidth()
    return lib.igGetWindowContentRegionWidth()
end
function M.GetWindowDrawList()
    return lib.igGetWindowDrawList()
end
function M.GetWindowHeight()
    return lib.igGetWindowHeight()
end
function M.GetWindowPos()
    return lib.igGetWindowPos()
end
function M.GetWindowSize()
    return lib.igGetWindowSize()
end
function M.GetWindowWidth()
    return lib.igGetWindowWidth()
end
function M.Image(user_texture_id,size,uv0,uv1,tint_col,border_col)
    uv1 = uv1 or ImVec2(1,1)
    tint_col = tint_col or ImVec4(1,1,1,1)
    uv0 = uv0 or ImVec2(0,0)
    border_col = border_col or ImVec4(0,0,0,0)
    return lib.igImage(user_texture_id,size,uv0,uv1,tint_col,border_col)
end
function M.ImageButton(user_texture_id,size,uv0,uv1,frame_padding,bg_col,tint_col)
    uv1 = uv1 or ImVec2(1,1)
    bg_col = bg_col or ImVec4(0,0,0,0)
    uv0 = uv0 or ImVec2(0,0)
    frame_padding = frame_padding or -1
    tint_col = tint_col or ImVec4(1,1,1,1)
    return lib.igImageButton(user_texture_id,size,uv0,uv1,frame_padding,bg_col,tint_col)
end
function M.Indent(indent_w)
    indent_w = indent_w or 0.0
    return lib.igIndent(indent_w)
end
function M.InputDouble(label,v,step,step_fast,format,extra_flags)
    step = step or 0.0
    format = format or "%.6f"
    step_fast = step_fast or 0.0
    extra_flags = extra_flags or 0
    return lib.igInputDouble(label,v,step,step_fast,format,extra_flags)
end
function M.InputFloat(label,v,step,step_fast,format,extra_flags)
    step = step or 0.0
    format = format or "%.3f"
    step_fast = step_fast or 0.0
    extra_flags = extra_flags or 0
    return lib.igInputFloat(label,v,step,step_fast,format,extra_flags)
end
function M.InputFloat2(label,v,format,extra_flags)
    format = format or "%.3f"
    extra_flags = extra_flags or 0
    return lib.igInputFloat2(label,v,format,extra_flags)
end
function M.InputFloat3(label,v,format,extra_flags)
    format = format or "%.3f"
    extra_flags = extra_flags or 0
    return lib.igInputFloat3(label,v,format,extra_flags)
end
function M.InputFloat4(label,v,format,extra_flags)
    format = format or "%.3f"
    extra_flags = extra_flags or 0
    return lib.igInputFloat4(label,v,format,extra_flags)
end
function M.InputInt(label,v,step,step_fast,extra_flags)
    step = step or 1
    extra_flags = extra_flags or 0
    step_fast = step_fast or 100
    return lib.igInputInt(label,v,step,step_fast,extra_flags)
end
function M.InputInt2(label,v,extra_flags)
    extra_flags = extra_flags or 0
    return lib.igInputInt2(label,v,extra_flags)
end
function M.InputInt3(label,v,extra_flags)
    extra_flags = extra_flags or 0
    return lib.igInputInt3(label,v,extra_flags)
end
function M.InputInt4(label,v,extra_flags)
    extra_flags = extra_flags or 0
    return lib.igInputInt4(label,v,extra_flags)
end
function M.InputScalar(label,data_type,v,step,step_fast,format,extra_flags)
    step = step or nil
    format = format or nil
    step_fast = step_fast or nil
    extra_flags = extra_flags or 0
    return lib.igInputScalar(label,data_type,v,step,step_fast,format,extra_flags)
end
function M.InputScalarN(label,data_type,v,components,step,step_fast,format,extra_flags)
    step = step or nil
    format = format or nil
    step_fast = step_fast or nil
    extra_flags = extra_flags or 0
    return lib.igInputScalarN(label,data_type,v,components,step,step_fast,format,extra_flags)
end
function M.InputText(label,buf,buf_size,flags,callback,user_data)
    callback = callback or nil
    user_data = user_data or nil
    flags = flags or 0
    return lib.igInputText(label,buf,buf_size,flags,callback,user_data)
end
function M.InputTextMultiline(label,buf,buf_size,size,flags,callback,user_data)
    callback = callback or nil
    user_data = user_data or nil
    size = size or ImVec2(0,0)
    flags = flags or 0
    return lib.igInputTextMultiline(label,buf,buf_size,size,flags,callback,user_data)
end
function M.InvisibleButton(str_id,size)
    return lib.igInvisibleButton(str_id,size)
end
function M.IsAnyItemActive()
    return lib.igIsAnyItemActive()
end
function M.IsAnyItemFocused()
    return lib.igIsAnyItemFocused()
end
function M.IsAnyItemHovered()
    return lib.igIsAnyItemHovered()
end
function M.IsAnyMouseDown()
    return lib.igIsAnyMouseDown()
end
function M.IsItemActive()
    return lib.igIsItemActive()
end
function M.IsItemClicked(mouse_button)
    mouse_button = mouse_button or 0
    return lib.igIsItemClicked(mouse_button)
end
function M.IsItemDeactivated()
    return lib.igIsItemDeactivated()
end
function M.IsItemDeactivatedAfterChange()
    return lib.igIsItemDeactivatedAfterChange()
end
function M.IsItemFocused()
    return lib.igIsItemFocused()
end
function M.IsItemHovered(flags)
    flags = flags or 0
    return lib.igIsItemHovered(flags)
end
function M.IsItemVisible()
    return lib.igIsItemVisible()
end
function M.IsKeyDown(user_key_index)
    return lib.igIsKeyDown(user_key_index)
end
function M.IsKeyPressed(user_key_index,_repeat)
    _repeat = _repeat or true
    return lib.igIsKeyPressed(user_key_index,_repeat)
end
function M.IsKeyReleased(user_key_index)
    return lib.igIsKeyReleased(user_key_index)
end
function M.IsMouseClicked(button,_repeat)
    _repeat = _repeat or false
    return lib.igIsMouseClicked(button,_repeat)
end
function M.IsMouseDoubleClicked(button)
    return lib.igIsMouseDoubleClicked(button)
end
function M.IsMouseDown(button)
    return lib.igIsMouseDown(button)
end
function M.IsMouseDragging(button,lock_threshold)
    lock_threshold = lock_threshold or -1.0
    button = button or 0
    return lib.igIsMouseDragging(button,lock_threshold)
end
function M.IsMouseHoveringRect(r_min,r_max,clip)
    clip = clip or true
    return lib.igIsMouseHoveringRect(r_min,r_max,clip)
end
function M.IsMousePosValid(mouse_pos)
    mouse_pos = mouse_pos or nil
    return lib.igIsMousePosValid(mouse_pos)
end
function M.IsMouseReleased(button)
    return lib.igIsMouseReleased(button)
end
function M.IsPopupOpen(str_id)
    return lib.igIsPopupOpen(str_id)
end
function M.IsRectVisible(size)
    return lib.igIsRectVisible(size)
end
function M.IsRectVisibleVec2(rect_min,rect_max)
    return lib.igIsRectVisibleVec2(rect_min,rect_max)
end
function M.IsWindowAppearing()
    return lib.igIsWindowAppearing()
end
function M.IsWindowCollapsed()
    return lib.igIsWindowCollapsed()
end
function M.IsWindowFocused(flags)
    flags = flags or 0
    return lib.igIsWindowFocused(flags)
end
function M.IsWindowHovered(flags)
    flags = flags or 0
    return lib.igIsWindowHovered(flags)
end
function M.LabelText(label,fmt,...)
    return lib.igLabelText(label,fmt,...)
end
function M.LabelTextV(label,fmt,args)
    return lib.igLabelTextV(label,fmt,args)
end
function M.ListBoxStr_arr(label,current_item,items,items_count,height_in_items)
    height_in_items = height_in_items or -1
    return lib.igListBoxStr_arr(label,current_item,items,items_count,height_in_items)
end
function M.ListBoxFnPtr(label,current_item,items_getter,data,items_count,height_in_items)
    height_in_items = height_in_items or -1
    return lib.igListBoxFnPtr(label,current_item,items_getter,data,items_count,height_in_items)
end
function M.ListBoxFooter()
    return lib.igListBoxFooter()
end
function M.ListBoxHeaderVec2(label,size)
    size = size or ImVec2(0,0)
    return lib.igListBoxHeaderVec2(label,size)
end
function M.ListBoxHeaderInt(label,items_count,height_in_items)
    height_in_items = height_in_items or -1
    return lib.igListBoxHeaderInt(label,items_count,height_in_items)
end
function M.LoadIniSettingsFromDisk(ini_filename)
    return lib.igLoadIniSettingsFromDisk(ini_filename)
end
function M.LoadIniSettingsFromMemory(ini_data,ini_size)
    ini_size = ini_size or 0
    return lib.igLoadIniSettingsFromMemory(ini_data,ini_size)
end
function M.LogButtons()
    return lib.igLogButtons()
end
function M.LogFinish()
    return lib.igLogFinish()
end
function M.LogText(fmt,...)
    return lib.igLogText(fmt,...)
end
function M.LogToClipboard(max_depth)
    max_depth = max_depth or -1
    return lib.igLogToClipboard(max_depth)
end
function M.LogToFile(max_depth,filename)
    filename = filename or nil
    max_depth = max_depth or -1
    return lib.igLogToFile(max_depth,filename)
end
function M.LogToTTY(max_depth)
    max_depth = max_depth or -1
    return lib.igLogToTTY(max_depth)
end
function M.MemAlloc(size)
    return lib.igMemAlloc(size)
end
function M.MemFree(ptr)
    return lib.igMemFree(ptr)
end
function M.MenuItemBool(label,shortcut,selected,enabled)
    enabled = enabled or true
    shortcut = shortcut or nil
    selected = selected or false
    return lib.igMenuItemBool(label,shortcut,selected,enabled)
end
function M.MenuItemBoolPtr(label,shortcut,p_selected,enabled)
    enabled = enabled or true
    return lib.igMenuItemBoolPtr(label,shortcut,p_selected,enabled)
end
function M.NewFrame()
    return lib.igNewFrame()
end
function M.NewLine()
    return lib.igNewLine()
end
function M.NextColumn()
    return lib.igNextColumn()
end
function M.OpenPopup(str_id)
    return lib.igOpenPopup(str_id)
end
function M.OpenPopupOnItemClick(str_id,mouse_button)
    mouse_button = mouse_button or 1
    str_id = str_id or nil
    return lib.igOpenPopupOnItemClick(str_id,mouse_button)
end
function M.PlotHistogramFloatPtr(label,values,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size,stride)
    overlay_text = overlay_text or nil
    values_offset = values_offset or 0
    scale_max = scale_max or M.FLT_MAX
    scale_min = scale_min or M.FLT_MAX
    graph_size = graph_size or ImVec2(0,0)
    stride = stride or ffi.sizeof("float")
    return lib.igPlotHistogramFloatPtr(label,values,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size,stride)
end
function M.PlotHistogramFnPtr(label,values_getter,data,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size)
    overlay_text = overlay_text or nil
    values_offset = values_offset or 0
    scale_max = scale_max or M.FLT_MAX
    scale_min = scale_min or M.FLT_MAX
    graph_size = graph_size or ImVec2(0,0)
    return lib.igPlotHistogramFnPtr(label,values_getter,data,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size)
end
function M.PlotLines(label,values,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size,stride)
    overlay_text = overlay_text or nil
    values_offset = values_offset or 0
    scale_max = scale_max or M.FLT_MAX
    scale_min = scale_min or M.FLT_MAX
    graph_size = graph_size or ImVec2(0,0)
    stride = stride or ffi.sizeof("float")
    return lib.igPlotLines(label,values,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size,stride)
end
function M.PlotLinesFnPtr(label,values_getter,data,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size)
    overlay_text = overlay_text or nil
    values_offset = values_offset or 0
    scale_max = scale_max or M.FLT_MAX
    scale_min = scale_min or M.FLT_MAX
    graph_size = graph_size or ImVec2(0,0)
    return lib.igPlotLinesFnPtr(label,values_getter,data,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size)
end
function M.PopAllowKeyboardFocus()
    return lib.igPopAllowKeyboardFocus()
end
function M.PopButtonRepeat()
    return lib.igPopButtonRepeat()
end
function M.PopClipRect()
    return lib.igPopClipRect()
end
function M.PopFont()
    return lib.igPopFont()
end
function M.PopID()
    return lib.igPopID()
end
function M.PopItemWidth()
    return lib.igPopItemWidth()
end
function M.PopStyleColor(count)
    count = count or 1
    return lib.igPopStyleColor(count)
end
function M.PopStyleVar(count)
    count = count or 1
    return lib.igPopStyleVar(count)
end
function M.PopTextWrapPos()
    return lib.igPopTextWrapPos()
end
function M.ProgressBar(fraction,size_arg,overlay)
    size_arg = size_arg or ImVec2(-1,0)
    overlay = overlay or nil
    return lib.igProgressBar(fraction,size_arg,overlay)
end
function M.PushAllowKeyboardFocus(allow_keyboard_focus)
    return lib.igPushAllowKeyboardFocus(allow_keyboard_focus)
end
function M.PushButtonRepeat(_repeat)
    return lib.igPushButtonRepeat(_repeat)
end
function M.PushClipRect(clip_rect_min,clip_rect_max,intersect_with_current_clip_rect)
    return lib.igPushClipRect(clip_rect_min,clip_rect_max,intersect_with_current_clip_rect)
end
function M.PushFont(font)
    return lib.igPushFont(font)
end
function M.PushIDStr(str_id)
    return lib.igPushIDStr(str_id)
end
function M.PushIDRange(str_id_begin,str_id_end)
    return lib.igPushIDRange(str_id_begin,str_id_end)
end
function M.PushIDPtr(ptr_id)
    return lib.igPushIDPtr(ptr_id)
end
function M.PushIDInt(int_id)
    return lib.igPushIDInt(int_id)
end
function M.PushItemWidth(item_width)
    return lib.igPushItemWidth(item_width)
end
function M.PushStyleColorU32(idx,col)
    return lib.igPushStyleColorU32(idx,col)
end
function M.PushStyleColor(idx,col)
    return lib.igPushStyleColor(idx,col)
end
function M.PushStyleVarFloat(idx,val)
    return lib.igPushStyleVarFloat(idx,val)
end
function M.PushStyleVarVec2(idx,val)
    return lib.igPushStyleVarVec2(idx,val)
end
function M.PushTextWrapPos(wrap_pos_x)
    wrap_pos_x = wrap_pos_x or 0.0
    return lib.igPushTextWrapPos(wrap_pos_x)
end
function M.RadioButtonBool(label,active)
    return lib.igRadioButtonBool(label,active)
end
function M.RadioButtonIntPtr(label,v,v_button)
    return lib.igRadioButtonIntPtr(label,v,v_button)
end
function M.Render()
    return lib.igRender()
end
function M.ResetMouseDragDelta(button)
    button = button or 0
    return lib.igResetMouseDragDelta(button)
end
function M.SameLine(pos_x,spacing_w)
    pos_x = pos_x or 0.0
    spacing_w = spacing_w or -1.0
    return lib.igSameLine(pos_x,spacing_w)
end
function M.SaveIniSettingsToDisk(ini_filename)
    return lib.igSaveIniSettingsToDisk(ini_filename)
end
function M.SaveIniSettingsToMemory(out_ini_size)
    out_ini_size = out_ini_size or nil
    return lib.igSaveIniSettingsToMemory(out_ini_size)
end
function M.Selectable(label,selected,flags,size)
    flags = flags or 0
    size = size or ImVec2(0,0)
    selected = selected or false
    return lib.igSelectable(label,selected,flags,size)
end
function M.SelectableBoolPtr(label,p_selected,flags,size)
    size = size or ImVec2(0,0)
    flags = flags or 0
    return lib.igSelectableBoolPtr(label,p_selected,flags,size)
end
function M.Separator()
    return lib.igSeparator()
end
function M.SetAllocatorFunctions(alloc_func,free_func,user_data)
    user_data = user_data or nil
    return lib.igSetAllocatorFunctions(alloc_func,free_func,user_data)
end
function M.SetClipboardText(text)
    return lib.igSetClipboardText(text)
end
function M.SetColorEditOptions(flags)
    return lib.igSetColorEditOptions(flags)
end
function M.SetColumnOffset(column_index,offset_x)
    return lib.igSetColumnOffset(column_index,offset_x)
end
function M.SetColumnWidth(column_index,width)
    return lib.igSetColumnWidth(column_index,width)
end
function M.SetCurrentContext(ctx)
    return lib.igSetCurrentContext(ctx)
end
function M.SetCursorPos(local_pos)
    return lib.igSetCursorPos(local_pos)
end
function M.SetCursorPosX(x)
    return lib.igSetCursorPosX(x)
end
function M.SetCursorPosY(y)
    return lib.igSetCursorPosY(y)
end
function M.SetCursorScreenPos(screen_pos)
    return lib.igSetCursorScreenPos(screen_pos)
end
function M.SetDragDropPayload(type,data,size,cond)
    cond = cond or 0
    return lib.igSetDragDropPayload(type,data,size,cond)
end
function M.SetItemAllowOverlap()
    return lib.igSetItemAllowOverlap()
end
function M.SetItemDefaultFocus()
    return lib.igSetItemDefaultFocus()
end
function M.SetKeyboardFocusHere(offset)
    offset = offset or 0
    return lib.igSetKeyboardFocusHere(offset)
end
function M.SetMouseCursor(type)
    return lib.igSetMouseCursor(type)
end
function M.SetNextTreeNodeOpen(is_open,cond)
    cond = cond or 0
    return lib.igSetNextTreeNodeOpen(is_open,cond)
end
function M.SetNextWindowBgAlpha(alpha)
    return lib.igSetNextWindowBgAlpha(alpha)
end
function M.SetNextWindowCollapsed(collapsed,cond)
    cond = cond or 0
    return lib.igSetNextWindowCollapsed(collapsed,cond)
end
function M.SetNextWindowContentSize(size)
    return lib.igSetNextWindowContentSize(size)
end
function M.SetNextWindowFocus()
    return lib.igSetNextWindowFocus()
end
function M.SetNextWindowPos(pos,cond,pivot)
    cond = cond or 0
    pivot = pivot or ImVec2(0,0)
    return lib.igSetNextWindowPos(pos,cond,pivot)
end
function M.SetNextWindowSize(size,cond)
    cond = cond or 0
    return lib.igSetNextWindowSize(size,cond)
end
function M.SetNextWindowSizeConstraints(size_min,size_max,custom_callback,custom_callback_data)
    custom_callback = custom_callback or nil
    custom_callback_data = custom_callback_data or nil
    return lib.igSetNextWindowSizeConstraints(size_min,size_max,custom_callback,custom_callback_data)
end
function M.SetScrollFromPosY(pos_y,center_y_ratio)
    center_y_ratio = center_y_ratio or 0.5
    return lib.igSetScrollFromPosY(pos_y,center_y_ratio)
end
function M.SetScrollHere(center_y_ratio)
    center_y_ratio = center_y_ratio or 0.5
    return lib.igSetScrollHere(center_y_ratio)
end
function M.SetScrollX(scroll_x)
    return lib.igSetScrollX(scroll_x)
end
function M.SetScrollY(scroll_y)
    return lib.igSetScrollY(scroll_y)
end
function M.SetStateStorage(storage)
    return lib.igSetStateStorage(storage)
end
function M.SetTooltip(fmt,...)
    return lib.igSetTooltip(fmt,...)
end
function M.SetTooltipV(fmt,args)
    return lib.igSetTooltipV(fmt,args)
end
function M.SetWindowCollapsedBool(collapsed,cond)
    cond = cond or 0
    return lib.igSetWindowCollapsedBool(collapsed,cond)
end
function M.SetWindowCollapsedStr(name,collapsed,cond)
    cond = cond or 0
    return lib.igSetWindowCollapsedStr(name,collapsed,cond)
end
function M.SetWindowFocus()
    return lib.igSetWindowFocus()
end
function M.SetWindowFocusStr(name)
    return lib.igSetWindowFocusStr(name)
end
function M.SetWindowFontScale(scale)
    return lib.igSetWindowFontScale(scale)
end
function M.SetWindowPosVec2(pos,cond)
    cond = cond or 0
    return lib.igSetWindowPosVec2(pos,cond)
end
function M.SetWindowPosStr(name,pos,cond)
    cond = cond or 0
    return lib.igSetWindowPosStr(name,pos,cond)
end
function M.SetWindowSizeVec2(size,cond)
    cond = cond or 0
    return lib.igSetWindowSizeVec2(size,cond)
end
function M.SetWindowSizeStr(name,size,cond)
    cond = cond or 0
    return lib.igSetWindowSizeStr(name,size,cond)
end
function M.ShowDemoWindow(p_open)
    p_open = p_open or nil
    return lib.igShowDemoWindow(p_open)
end
function M.ShowFontSelector(label)
    return lib.igShowFontSelector(label)
end
function M.ShowMetricsWindow(p_open)
    p_open = p_open or nil
    return lib.igShowMetricsWindow(p_open)
end
function M.ShowStyleEditor(ref)
    ref = ref or nil
    return lib.igShowStyleEditor(ref)
end
function M.ShowStyleSelector(label)
    return lib.igShowStyleSelector(label)
end
function M.ShowUserGuide()
    return lib.igShowUserGuide()
end
function M.SliderAngle(label,v_rad,v_degrees_min,v_degrees_max)
    v_degrees_min = v_degrees_min or -360.0
    v_degrees_max = v_degrees_max or 360.0
    return lib.igSliderAngle(label,v_rad,v_degrees_min,v_degrees_max)
end
function M.SliderFloat(label,v,v_min,v_max,format,power)
    format = format or "%.3f"
    power = power or 1.0
    return lib.igSliderFloat(label,v,v_min,v_max,format,power)
end
function M.SliderFloat2(label,v,v_min,v_max,format,power)
    format = format or "%.3f"
    power = power or 1.0
    return lib.igSliderFloat2(label,v,v_min,v_max,format,power)
end
function M.SliderFloat3(label,v,v_min,v_max,format,power)
    format = format or "%.3f"
    power = power or 1.0
    return lib.igSliderFloat3(label,v,v_min,v_max,format,power)
end
function M.SliderFloat4(label,v,v_min,v_max,format,power)
    format = format or "%.3f"
    power = power or 1.0
    return lib.igSliderFloat4(label,v,v_min,v_max,format,power)
end
function M.SliderInt(label,v,v_min,v_max,format)
    format = format or "%d"
    return lib.igSliderInt(label,v,v_min,v_max,format)
end
function M.SliderInt2(label,v,v_min,v_max,format)
    format = format or "%d"
    return lib.igSliderInt2(label,v,v_min,v_max,format)
end
function M.SliderInt3(label,v,v_min,v_max,format)
    format = format or "%d"
    return lib.igSliderInt3(label,v,v_min,v_max,format)
end
function M.SliderInt4(label,v,v_min,v_max,format)
    format = format or "%d"
    return lib.igSliderInt4(label,v,v_min,v_max,format)
end
function M.SliderScalar(label,data_type,v,v_min,v_max,format,power)
    format = format or nil
    power = power or 1.0
    return lib.igSliderScalar(label,data_type,v,v_min,v_max,format,power)
end
function M.SliderScalarN(label,data_type,v,components,v_min,v_max,format,power)
    format = format or nil
    power = power or 1.0
    return lib.igSliderScalarN(label,data_type,v,components,v_min,v_max,format,power)
end
function M.SmallButton(label)
    return lib.igSmallButton(label)
end
function M.Spacing()
    return lib.igSpacing()
end
function M.StyleColorsClassic(dst)
    dst = dst or nil
    return lib.igStyleColorsClassic(dst)
end
function M.StyleColorsDark(dst)
    dst = dst or nil
    return lib.igStyleColorsDark(dst)
end
function M.StyleColorsLight(dst)
    dst = dst or nil
    return lib.igStyleColorsLight(dst)
end
function M.Text(fmt,...)
    return lib.igText(fmt,...)
end
function M.TextColored(col,fmt,...)
    return lib.igTextColored(col,fmt,...)
end
function M.TextColoredV(col,fmt,args)
    return lib.igTextColoredV(col,fmt,args)
end
function M.TextDisabled(fmt,...)
    return lib.igTextDisabled(fmt,...)
end
function M.TextDisabledV(fmt,args)
    return lib.igTextDisabledV(fmt,args)
end
function M.TextUnformatted(text,text_end)
    text_end = text_end or nil
    return lib.igTextUnformatted(text,text_end)
end
function M.TextV(fmt,args)
    return lib.igTextV(fmt,args)
end
function M.TextWrapped(fmt,...)
    return lib.igTextWrapped(fmt,...)
end
function M.TextWrappedV(fmt,args)
    return lib.igTextWrappedV(fmt,args)
end
function M.TreeAdvanceToLabelPos()
    return lib.igTreeAdvanceToLabelPos()
end
function M.TreeNodeStr(label)
    return lib.igTreeNodeStr(label)
end
function M.TreeNodeStrStr(str_id,fmt,...)
    return lib.igTreeNodeStrStr(str_id,fmt,...)
end
function M.TreeNodePtr(ptr_id,fmt,...)
    return lib.igTreeNodePtr(ptr_id,fmt,...)
end
function M.TreeNodeExStr(label,flags)
    flags = flags or 0
    return lib.igTreeNodeExStr(label,flags)
end
function M.TreeNodeExStrStr(str_id,flags,fmt,...)
    return lib.igTreeNodeExStrStr(str_id,flags,fmt,...)
end
function M.TreeNodeExPtr(ptr_id,flags,fmt,...)
    return lib.igTreeNodeExPtr(ptr_id,flags,fmt,...)
end
function M.TreeNodeExVStr(str_id,flags,fmt,args)
    return lib.igTreeNodeExVStr(str_id,flags,fmt,args)
end
function M.TreeNodeExVPtr(ptr_id,flags,fmt,args)
    return lib.igTreeNodeExVPtr(ptr_id,flags,fmt,args)
end
function M.TreeNodeVStr(str_id,fmt,args)
    return lib.igTreeNodeVStr(str_id,fmt,args)
end
function M.TreeNodeVPtr(ptr_id,fmt,args)
    return lib.igTreeNodeVPtr(ptr_id,fmt,args)
end
function M.TreePop()
    return lib.igTreePop()
end
function M.TreePushStr(str_id)
    return lib.igTreePushStr(str_id)
end
function M.TreePushPtr(ptr_id)
    ptr_id = ptr_id or nil
    return lib.igTreePushPtr(ptr_id)
end
function M.Unindent(indent_w)
    indent_w = indent_w or 0.0
    return lib.igUnindent(indent_w)
end
function M.VSliderFloat(label,size,v,v_min,v_max,format,power)
    format = format or "%.3f"
    power = power or 1.0
    return lib.igVSliderFloat(label,size,v,v_min,v_max,format,power)
end
function M.VSliderInt(label,size,v,v_min,v_max,format)
    format = format or "%d"
    return lib.igVSliderInt(label,size,v,v_min,v_max,format)
end
function M.VSliderScalar(label,size,data_type,v,v_min,v_max,format,power)
    format = format or nil
    power = power or 1.0
    return lib.igVSliderScalar(label,size,data_type,v,v_min,v_max,format,power)
end
function M.ValueBool(prefix,b)
    return lib.igValueBool(prefix,b)
end
function M.ValueInt(prefix,v)
    return lib.igValueInt(prefix,v)
end
function M.ValueUint(prefix,v)
    return lib.igValueUint(prefix,v)
end
function M.ValueFloat(prefix,v,float_format)
    float_format = float_format or nil
    return lib.igValueFloat(prefix,v,float_format)
end
return M
----------END_AUTOGENERATED_LUA-----------------------------
