-- Generated by LuaSTG Editor Sharp
-- Mod name: 
_author = "LuaSTG User"
_mod_version = 4096
_allow_practice = true
_allow_sc_practice =true
_LoadImageFromFile('image:'..'Muki_63rd_cdbg1','Muki_63rd_cdbg1.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'Muki_63rd_cdbg2','Muki_63rd_cdbg2.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'Muki_63rd_cdbg3','Muki_63rd_cdbg3.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'Muki_white','Muki_white.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'Muki_AiC_bg','Muki_AiC_bg.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'Muki_AiC_Noel_face_final','Muki_AiC_Noel_face_final.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'Muki_AiC_Noel_face_fight','Muki_AiC_Noel_face_fight.png',true,0,0,false,0)
Include'ParamLab.lua'
Muki_Noel_background=Class(object)

function Muki_Noel_background:init()
	background.init(self,false)
	--set camera
	Set3D('eye',-0.90,0.00,0.00)
	Set3D('at',1.00,0.00,0.00)
	Set3D('up',0.00,1.00,0.00)
	Set3D('fovy',0.50)
	Set3D('z',0.10,24.00)
	Set3D('fog',5.00,10.00,Color(255,255,255,255))
	self.k = 1.5
	self.xx = player.x
	self.yy = player.y
end

function Muki_Noel_background:render()
	SetViewMode'3d'
	RenderClear(lstg.view3d.fog[3])
	local k = self.k
	local v = 0.001
	Render4V('image:Muki_AiC_bg',
	1 * k , 0.5 * k +(self.yy-player.y)*v, -0.5 * k - (self.x-player.x)*v,
	1 * k, 0.5 * k +(self.yy-player.y)*v, 0.5 * k - (self.x-player.x)*v,
	1 * k, -0.5 * k +(self.yy-player.y)*v, 0.5 * k - (self.x-player.x)*v,
	1 * k, -0.5 * k +(self.yy-player.y)*v, -0.5 * k - (self.x-player.x)*v)
	SetViewMode'world'
end
_editor_class["Muki_63rd_cdbg"]=Class(_spellcard_background)
_editor_class["Muki_63rd_cdbg"].init=function(self)
    _spellcard_background.init(self)
    self.IsUI=true
    self.bound=false
    _spellcard_background.AddLayer(self,"img_void",false,0,0,0,0,0,0,"",1,1,
        function(self)
            self.task={}
            self.tex = "image:Muki_63rd_cdbg3"
            local function make_version(major, minor, patch)
            	return (major * 1000 * 1000) + (minor * 1000) + (patch)
            end
            local function is_LuaSTG_Sub()
                if lstg.GetVersionName then
                    if string.find(lstg.GetVersionName(), "LuaSTG Sub") then
                        return true
                    end
                end
                return false
            end
            local function is_API_lstg_SetTextureSamplerState_new_behavior()
                if is_LuaSTG_Sub() then
                    local major, minor, patch = lstg.GetVersionNumber()
                    if make_version(major, minor, patch) >= make_version(0, 18, 11) then
                        return true
                    end
                end
                return false
            end
            if is_API_lstg_SetTextureSamplerState_new_behavior() then
                self.is_API_lstg_SetTextureSamplerState_old_behavior = false
                lstg.SetTextureSamplerState(self.tex, "linear+wrap")
            else
                self.is_API_lstg_SetTextureSamplerState_old_behavior = true
            end
            self.x,self.y = 0,96
            self.angle = 90
            self.omiga = 0.5
            self.speed = 0.5
            self.radiusMin,self.radiusMax = 0,760
            self.radius = 380
            self.duplicate = 1
            self.n = 256
            self.mode = 2
            self.blend = "mul+add"
            self.r = 128 self.g = 128 self.b = 128
            lasttask=task.New(self,function()
                for _=1,_infinite do
lasttask=task.New(self,function () ex.SmoothSetValueTo("r",255,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("g",255,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("b",64,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
                    task._Wait(120)
lasttask=task.New(self,function () ex.SmoothSetValueTo("r",64,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("g",255,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("b",64,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
                    task._Wait(120)
lasttask=task.New(self,function () ex.SmoothSetValueTo("r",255,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("g",64,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("b",255,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
                    task._Wait(120)
lasttask=task.New(self,function () ex.SmoothSetValueTo("r",64,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("g",64,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("b",255,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
                    task._Wait(120)
                end
            end)
        end,
        function(self)
            task.Do(self)
            self.angle = self.angle + self.omiga
            self.color = Color(255*self._cur_alpha, self.r, self.g, self.b)
        end,
        function(self)
            if self.is_API_lstg_SetTextureSamplerState_old_behavior then
                SetTextureSamplerState("address", "wrap")
            end
            local w, h = GetTextureSize(self.tex)
            local a, ta = self.angle, 0
            local da = 360 / self.n
            if self.mode == 1 then
                local tda = w * self.duplicate / self.n
                local t = -self.radiusMin / self.radius * h + self.timer * self.speed
                local tv = -(self.radiusMax - self.radiusMin) / self.radius * h
                for _ = 1, self.n do
                    RenderTexture(self.tex, self.blend, { self.x + self.radiusMin * cos(a), self.y + self.radiusMin * sin(a), 0.5, ta, t, self.color },
                            { self.x + self.radiusMin * cos(a + da), self.y + self.radiusMin * sin(a + da), 0.5, ta + tda, t, self.color },
                            { self.x + self.radiusMax * cos(a + da), self.y + self.radiusMax * sin(a + da), 0.5, ta + tda, t + tv, self.color },
                            { self.x + self.radiusMax * cos(a), self.y + self.radiusMax * sin(a), 0.5, ta, t + tv, self.color })
                    a = a + da
                    ta = ta + tda
                end
            else
                local tda = -h * self.duplicate / self.n
                local t = -self.radiusMin / self.radius * w + self.timer * self.speed
                local tv = -(self.radiusMax - self.radiusMin) / self.radius * w
                for _ = 1, self.n do
                    RenderTexture(self.tex, self.blend, { self.x + self.radiusMin * cos(a), self.y + self.radiusMin * sin(a), 0.5, t, ta, self.color },
                            { self.x + self.radiusMin * cos(a + da), self.y + self.radiusMin * sin(a + da), 0.5, t, ta + tda, self.color },
                            { self.x + self.radiusMax * cos(a + da), self.y + self.radiusMax * sin(a + da), 0.5, t + tv, ta + tda, self.color },
                            { self.x + self.radiusMax * cos(a), self.y + self.radiusMax * sin(a), 0.5, t + tv, ta, self.color })
                    a = a + da
                    ta = ta + tda
                end
            end
            if self.is_API_lstg_SetTextureSamplerState_old_behavior then
                SetTextureSamplerState("address", "clamp")
            end
        end
    )
    _spellcard_background.AddLayer(self,"img_void",false,0,0,0,0,0,0,"",1,1,
        function(self)
            self.task={}
            self.tex = "image:Muki_63rd_cdbg1"
            local function make_version(major, minor, patch)
            	return (major * 1000 * 1000) + (minor * 1000) + (patch)
            end
            local function is_LuaSTG_Sub()
                if lstg.GetVersionName then
                    if string.find(lstg.GetVersionName(), "LuaSTG Sub") then
                        return true
                    end
                end
                return false
            end
            local function is_API_lstg_SetTextureSamplerState_new_behavior()
                if is_LuaSTG_Sub() then
                    local major, minor, patch = lstg.GetVersionNumber()
                    if make_version(major, minor, patch) >= make_version(0, 18, 11) then
                        return true
                    end
                end
                return false
            end
            if is_API_lstg_SetTextureSamplerState_new_behavior() then
                self.is_API_lstg_SetTextureSamplerState_old_behavior = false
                lstg.SetTextureSamplerState(self.tex, "linear+wrap")
            else
                self.is_API_lstg_SetTextureSamplerState_old_behavior = true
            end
            self.x,self.y = 0,96
            self.angle = 90
            self.omiga = -1
            self.speed = -1
            self.radiusMin,self.radiusMax = 0,760
            self.radius = 380
            self.duplicate = 1
            self.n = 256
            self.mode = 2
            self.blend = "mul+add"
            self.r = 128 self.g = 128 self.b = 128
            lasttask=task.New(self,function()
                for _=1,_infinite do
lasttask=task.New(self,function () ex.SmoothSetValueTo("r",255,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("g",255,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("b",64,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
                    task._Wait(120)
lasttask=task.New(self,function () ex.SmoothSetValueTo("r",64,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("g",255,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("b",64,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
                    task._Wait(120)
lasttask=task.New(self,function () ex.SmoothSetValueTo("r",255,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("g",64,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("b",255,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
                    task._Wait(120)
lasttask=task.New(self,function () ex.SmoothSetValueTo("r",64,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("g",64,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
lasttask=task.New(self,function () ex.SmoothSetValueTo("b",255,120,MOVE_ACC_DEC,nil,0,MODE_SET) end )
                    task._Wait(120)
                end
            end)
        end,
        function(self)
            task.Do(self)
            self.angle = self.angle + self.omiga
            self.color = Color(255*self._cur_alpha, self.r, self.g, self.b)
        end,
        function(self)
            if self.is_API_lstg_SetTextureSamplerState_old_behavior then
                SetTextureSamplerState("address", "wrap")
            end
            local w, h = GetTextureSize(self.tex)
            local a, ta = self.angle, 0
            local da = 360 / self.n
            if self.mode == 1 then
                local tda = w * self.duplicate / self.n
                local t = -self.radiusMin / self.radius * h + self.timer * self.speed
                local tv = -(self.radiusMax - self.radiusMin) / self.radius * h
                for _ = 1, self.n do
                    RenderTexture(self.tex, self.blend, { self.x + self.radiusMin * cos(a), self.y + self.radiusMin * sin(a), 0.5, ta, t, self.color },
                            { self.x + self.radiusMin * cos(a + da), self.y + self.radiusMin * sin(a + da), 0.5, ta + tda, t, self.color },
                            { self.x + self.radiusMax * cos(a + da), self.y + self.radiusMax * sin(a + da), 0.5, ta + tda, t + tv, self.color },
                            { self.x + self.radiusMax * cos(a), self.y + self.radiusMax * sin(a), 0.5, ta, t + tv, self.color })
                    a = a + da
                    ta = ta + tda
                end
            else
                local tda = -h * self.duplicate / self.n
                local t = -self.radiusMin / self.radius * w + self.timer * self.speed
                local tv = -(self.radiusMax - self.radiusMin) / self.radius * w
                for _ = 1, self.n do
                    RenderTexture(self.tex, self.blend, { self.x + self.radiusMin * cos(a), self.y + self.radiusMin * sin(a), 0.5, t, ta, self.color },
                            { self.x + self.radiusMin * cos(a + da), self.y + self.radiusMin * sin(a + da), 0.5, t, ta + tda, self.color },
                            { self.x + self.radiusMax * cos(a + da), self.y + self.radiusMax * sin(a + da), 0.5, t + tv, ta + tda, self.color },
                            { self.x + self.radiusMax * cos(a), self.y + self.radiusMax * sin(a), 0.5, t + tv, ta, self.color })
                    a = a + da
                    ta = ta + tda
                end
            end
            if self.is_API_lstg_SetTextureSamplerState_old_behavior then
                SetTextureSamplerState("address", "clamp")
            end
        end
    )
    _spellcard_background.AddLayer(self,"image:Muki_63rd_cdbg2",false,0,0,0,0,0,0,"",1,1,
        function(self)
            self.task={}
        end,
        function(self)
            task.Do(self)
        end,
        function(self)
        end
    )
    _spellcard_background.AddLayer(self,"image:Muki_white",true,0,0,0,0,0,0,"",1,1,
        function(self)
            self.task={}
        end,
        function(self)
            task.Do(self)
        end,
        function(self)
        end
    )
end
_editor_class["a"]=Class(_object)
_editor_class["a"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img=player.img
    self.layer=LAYER_PLAYER
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=true
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    CreateRenderTarget("rt:player_dodge",1280,960)
    CreateRenderTarget("rt:test",1280,960)
    self.xx = player.x
    self.yy = player.y
    New(boss_cast_ef_out,self.x,self.y,nil,100,255,255)
    self.dpt=require("dinput")
    w = DG.NewParamList()
    w:Edit()
    
    w:NewParam('l',nil,'float')
    w:NewParam('r',nil,'float')
    w:NewParam('b',nil,'float')
    w:NewParam('t',nil,'float')
    w:NewParam('bool',nil,'bool')
    w:NewParam('color',nil,'color')
    w:NewParam('argb',nil,'argb')
    w:NewParam('blend',nil,'blend')
    w:NewParam('style',nil,'style')
    w:NewParam('style_dark',nil,'style_dark')
end
_editor_class["a"].frame=function(self)
    self.class.base.frame(self)
end
_editor_class["a"].render=function(self)
    self.img=player.img
    self.class.base.render(self)
    PushRenderTarget("rt:player_dodge")
    RenderClear(Color(0,0,0,0))
    self.class.base.render(self)
    SetViewMode('ui')
    RenderRect('white',0, screen.width/4,0,screen.height/4)
    SetViewMode('world')
    PopRenderTarget()
    self.info1=self.dpt.getRawState(1)
    self.info2=self.dpt.getAxisRange(1)
    local i1 = self.info1
    local i2 = self.info2
    local text = aic.debug.GetAllInfo(i1)
    local d = aic.input.dinput
    local lx,ly,rx,ry = d.getLeftThumbX(),d.getLeftThumbY(),d.getRightThumbX(),d.getRightThumbY()
    if aic.input.GetMouseDirection()>0 then
        self.y = self.y-25
    elseif aic.input.GetMouseDirection()<0 then
        self.y = self.y+25
    end
    aic.ui.DrawText("main_font_zh2", text, -192, self.y, 0.7)
    --
    aic.ui.DrawText("main_font_zh2", "lx:"..lx, -192, 224, 0.7)
    aic.ui.DrawText("main_font_zh2", "ly:"..ly, -192, 204, 0.7)
    aic.ui.DrawText("main_font_zh2", "rx:"..rx, -192, 184, 0.7)
    aic.ui.DrawText("main_font_zh2", "ry:"..ry, -192, 164, 0.7)
    --]]
    SetViewMode('ui')
    local x,y = aic.input.GetMousePosition()
    DrawText('main_font_en', 'x: ' .. tostring(x) .. '  y: ' .. tostring(y), x+20,y)
    SetViewMode('world')
    SetViewMode('ui')
    --[[local rt = RenderTargetClass.Create('rt:player_dodge')
    rt:xy(nil,screen.width/2,screen.height/2)
    rt:uv(nil,screen.width/2,screen.height/2,0,screen.width/2,screen.height/2)
    rt:render()]]
    PLabKeyDown=true
    aic.ui.RenderRT('rt:player_dodge',w.l,w.r,w.b,w.t)
    --aic.ui.RenderRTRect('rt:player_dodge',w.l,w.r,w.b,w.t)
    SetViewMode('world')
end
_editor_class["NB_Portrait_AI"]=Class(_object)
_editor_class["NB_Portrait_AI"].init=function(self,_x,_y,s)
    self.x,self.y=_x,_y
    self.img="image:Muki_AiC_Noel_face_final"
    self.layer=LAYER_PLAYER-5
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    s=s or 0.3
    self.hscale=s
    self.vscale=s
    self.omiga=0---0.05
    (self).x,(self).y=192,96
    _object.set_color(self,"",0,255,255,255)
    local sn=(3)
    lasttask=task.New(self,function()
        do
            local _beg_ia=0 local ia=_beg_ia local _end_ia=255 local _d_ia=(_end_ia-_beg_ia)/(30-1)
            local _beg_isc=s local isc=_beg_isc local _end_isc=s+0.1 local _d_isc=(_end_isc-_beg_isc)/(30)
            for _=1,30 do
                _object.set_color(self,"",ia,255,255,255)
                self.hscale = isc
                self.vscale = isc
                task._Wait(1)
                ia=ia+_d_ia
                isc=isc+_d_isc
            end
        end
        task._Wait(60)
        do
            local _beg_ia=255 local ia=_beg_ia local _end_ia=0 local _d_ia=(_end_ia-_beg_ia)/(30-1)
            for _=1,30 do
                _object.set_color(self,"",ia,255,255,255)
                task._Wait(1)
                ia=ia+_d_ia
            end
        end
        _del(self,true)
    end)
    lasttask=task.New(self,function()
        do
            local _beg_iy=96 local iy=_beg_iy local _end_iy=0 local _w_iy=0 local _d_w_iy=1/(30-1)
            local _beg_ix=192 local ix=_beg_ix local _end_ix=0 local _w_ix=0 local _d_w_ix=1/(30-1)
            local i=1 local _d_i=(1)
            for _=1,30 do
                (self).x,(self).y=ix,iy
                if i>=60-sn then break end
                task._Wait(1)
                _w_iy=_w_iy+_d_w_iy iy=(_beg_iy-_end_iy)*(_w_iy-1)^2+_end_iy
                _w_ix=_w_ix+_d_w_ix ix=(_beg_ix-_end_ix)*(_w_ix-1)^2+_end_ix
                i=i+_d_i
            end
        end
        self.vx,self.vy=self.dx,self.dy
        task._Wait(sn)
        task._Wait(30)
        _set_a(self,0.05,180,false)
    end)
end
-- define node named: Define Function_ex
-- define node named: Insert Function to Function_ex
-- define node named: Create Task With Function_ex
test=aic.func.Define([=====[
]=====])
test:insert([=====[
    New(Muki_Noel_background)
]=====])
test:insert([=====[
    task._Wait(60)
]=====])
test:insert([=====[
    LoadMusicRecord("spellcard")
    _play_music("spellcard")
]=====])
test:insert([=====[
    local _boss_wait=true
    local _ref=New(_editor_class["Boss"],_editor_class["Boss"].cards)
    last=_ref
    if _boss_wait then while IsValid(_ref) do task.Wait() end end
]=====])
test:insert([=====[
    task._Wait(180)
]=====])
test:insert([=====[
    aic.pmode.GameFinishSave()
]=====])
test:insert([=====[
    task._Wait(1)
]=====])
_editor_class["Boss"]=Class(boss)
_editor_class["Boss"].cards={}
_editor_class["Boss"].name="Noel Cornehl & Ixia Polystachya"
_editor_class["Boss"].bgm=""
_editor_class["Boss"]._bg=nil
_editor_class["Boss"].difficulty="All"
_editor_class["Boss"].init=function(self,cards)
boss.init(self,512, 512,_editor_class["Boss"].name,cards,New(_editor_class["Muki_63rd_cdbg"]),_editor_class["Boss"].difficulty)
    --TryExcept(function() Print(aic.misc.GetAllInfo(lstg)) end,{[StackOverflow]=function() Print(StackOverflow) end})
    --[[for k,v in pairs(_G) do
    	if type(v)=='string' or type(v)=='number' then
    		Print(k..'='..tostring(v))
    	else
    		Print(k)
    	end
    end
    local list = {}
    for k,v in pairs(getfenv()) do
    	if type(v)=='string' or type(v)=='number' then
    		--Print(k..'='..tostring(v))
    	elseif type(v)=='function' then
    	    list[k]=debug.getinfo(v)
    	else
    		--Print(k)
    	end
    end
    for k,v in pairs(list) do
        local info='info of function '..k..':'
        for _,i in ipairs({'linedefined','lastlinedefined','currentline','isvararg','namewhat','source','nups','what','nparams','short_src'}) do
            info=info..'\n'..i..':'..tostring(v[i])
        end
        Print(info)
    end]]
            
end
table.insert(_editor_class["Boss"].cards,boss.move.New(0,120,60,MOVE_NORMAL))
_tmp_sc=boss.card.New("通常攻击",0,0,60,200000,{0,0,0},false)
function _tmp_sc:before()
    last=New(_editor_class["a"],0,0,_)
    last=New(_editor_class["NB_Portrait_AI"],0,0,0.4)
    lasttask=task.New(self,function()
        local lib = aic.IME
        lib.InputMethodOn()
        for _=1,_infinite do
            if lib.InputMethodStatus() == 'normal' and aic.input.GetLastClick('left') then
                lib.NewInputFrame(0,0)
            else
            end
            task._Wait(1)
        end
    end)
    lasttask=task.New(self,function()
        for _=1,_infinite do
            lstg.var.dodge = min(600, lstg.var.dodge + 1)
            task._Wait(1)
        end
    end)
end
function _tmp_sc:init()
    lasttask=task.New(self,function()
        boss.SetUIDisplay(self,true,true,true,false,true,true)
        aic.ui.NewSpellname(_boss, '测符「测试符卡」',1,0,-5)
        parrot = New(aic.misc.party_parrot,100,0,0.25,25,25,true)
        parrot.rot = 135
        task.New(parrot, function()
            local self = task.GetSelf()
            local x = self.x - 100
            local y = self.y
            for _ = 1, _infinite do
                for i = 1, 4 do
                    task.MoveTo(x + 100 * cos(i * 90),y + 100 * sin(i * 90), 30, 2)
                end
                task.Wait(60)
            end
        end)
        task.New(parrot, function()
            local self = task.GetSelf()
            self.navi = true
            for _ = 1, _infinite do
                last = New(_straight,square,COLOR_GRAY,self.x,self.y,0,self.rot,false,0,true,true,0,false,0,0,0,false)
                SetImgState(last, 'add+add', 255, 255, 255, 255)
                task.Wait(5)
            end
        end)
    end)
end
function _tmp_sc:beforedel()
end
function _tmp_sc:del()
end
function _tmp_sc:after()
end
_tmp_sc.perform=false
table.insert(_editor_class["Boss"].cards,_tmp_sc)
table.insert(_sc_table,{"Boss","通常攻击",_tmp_sc,#_editor_class["Boss"].cards,false})
stage.group.New('menu',{},"SpellCard",{lifeleft=7,power=400,faith=50000,bomb=3},true,1)
stage.group.AddStage('SpellCard','SpellCard@SpellCard',{lifeleft=7,power=400,faith=50000,bomb=3},true)
stage.group.DefStageFunc('SpellCard@SpellCard','init',function(self)
    _init_item(self)
    difficulty=self.group.difficulty
    New(mask_fader,'open')
    if jstg then jstg.CreatePlayers() else New(_G[lstg.var.player_name]) end
    lasttask=task.New(self,function()
        New(Muki_Noel_background)
        task._Wait(60)
        LoadMusicRecord("spellcard")
        _play_music("spellcard")
        local _boss_wait=true
        local _ref=New(_editor_class["Boss"],_editor_class["Boss"].cards)
        last=_ref
        if _boss_wait then while IsValid(_ref) do task.Wait() end end
        task._Wait(180)
        task._Wait(1)
    end)
    task.New(self,function()
        while coroutine.status(self.task[1])~='dead' do task.Wait() end
        stage.group.FinishReplay()
        New(mask_fader,'close')
        task.New(self,function()
            local _,bgm=EnumRes('bgm')
            for i=1,30 do
                for _,v in pairs(bgm) do
                    if GetMusicState(v)=='playing' then
                        SetBGMVolume(v,1-i/30)
                    end
                end
                task.Wait()
            end
        end)
        task.Wait(30)
        stage.group.FinishStage()
    end)
end)
